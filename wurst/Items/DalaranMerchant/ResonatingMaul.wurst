package ResonatingMaul
import Assets
import ItemObjEditing
import ChannelAbilityPreset

import ItemTooltipGenerator
import ItemAbilityPreset
import ItemAlias
import DalaranMerchant
import SobiMask
import Mindstaff
import BlacksmithHammer

import StormHammer
import ThunderClap
import ItemCombine
import LinkedList
import ClosureEvents
import DummyCaster
import OrderIds


public class ResonatingMaul
	static constant CLASSIFICATION = "Permanent"
	static constant ICON = "ReplaceableTextures\\CommandButtons\\BTNResonatingMaul.blp"
	static constant NAME = "Resonating Maul"
	static constant PASSIVE_DESC_1 = "The weaver's \"{0}\" mimics any \"{1}\" being in the area of its effect".format(StormHammer.NAME, ThunderClap.NAME)
	static constant PASSIVE_DESC_2 = "Any \"{0}\" mimics the weaver's  \"{1}\" being in the area of its effect.".format(StormHammer.NAME, ThunderClap.NAME)
	static constant int GOLD_COST = Mindstaff.GOLD_COST * 2 + SobiMask.GOLD_COST + BlacksmithHammer.GOLD_COST + ResonatingMaulRecipe.GOLD_COST
	static constant int STR = BlacksmithHammer.STRENGTH
	static constant real MANA_REG = SobiMask.MANA_REG_RATE
	static constant int MANA = Mindstaff.MANA * 2 + 50

	static constant ID = compiletime(ITEM_ID_GEN.next())
	static constant ALIAS_ID = compiletime(ITEM_ID_GEN.next())

	private static constant DUMMY_ABIL_ID = compiletime(ABIL_ID_GEN.next())
	
	protected static let tooltipGenerator = new ItemTooltipGenerator(NAME, "", GOLD_COST, "")
		..addPassiveEffect(PASSIVE_DESC_1)
		..addPassiveEffect(PASSIVE_DESC_2)
			
	@compiletime protected static function build()
		let attrDef = buildAttributeBonus(NAME, ICON, STR, 0, 0, tooltipGenerator)
		let manaRegDef = buildManaRegenerationBonus(NAME, ICON, MANA_REG, tooltipGenerator)
		let manaDef = buildManaBonus(NAME, ICON, MANA, tooltipGenerator)
		ItemAlias.build(ID, ALIAS_ID)(ItemDefinition def, boolean isAlias) ->
			def..setLevel(1)
			..setLevelUnclassified(1)
			..setLumberCost(0)
			..setHitPoints(999999)
			..setNumberofCharges(0)
			..setStockMaximum(1)
			..setStockReplenishInterval(1)
			..setStockStartDelay(1)
			..setCanBeDropped(true)
			..setPerishable(false)
			..setActivelyUsed(false)
			..setCanBeSoldByMerchants(true)
			..setCanBeSoldToMerchants(true)
			..setGoldCost(GOLD_COST)
			..setClassification(CLASSIFICATION)
			..setInterfaceIcon(ICON)
			tooltipGenerator.applyToDef(def)
			if not isAlias
				def.setAbilities(commaList(
					attrDef.getNewId(), manaRegDef.getNewId(), manaDef.getNewId()))
		new AbilityDefinitionMountainKingThunderClap(DUMMY_ABIL_ID)
		..setLevels(ThunderClap.LEVELS)
		..presetAOEDamage((int lvl) -> ThunderClap.DAMAGE[lvl - 1])
		..presetAttackSpeedReduction((int lvl) -> ThunderClap.ATTACK_SPEED_REDUCTION)
		..presetMovementSpeedReduction((int lvl) -> ThunderClap.MOVEMENT_SPEED_REDUCTION)
		..presetAreaofEffect((int lvl) -> ThunderClap.AOE)
		..presetBuffs((int lvl) -> ThunderClap.BUFF_ID.toRawCode())
		..presetDurationHero((int lvl) -> ThunderClap.DURATION)
		..presetDurationNormal((int lvl) -> ThunderClap.DURATION)
		..presetTargetsAllowed((int lvl) -> ThunderClap.TARGETS_ALLOWED)
		..setArtCaster("")
		..setArtEffect(ThunderClap.FX_EFFECT)
		..setDummyAbility()

	protected static function onInit()
		new ItemCombine(ID, asList<int>(Mindstaff.ID, Mindstaff.ID, SobiMask.ID, BlacksmithHammer.ID, ResonatingMaulRecipe.ID))

		EventListener.onCast(ThunderClap.ID) (unit caster) ->
			let casterPos = caster.getPos()
			let aoeSq = ThunderClap.AOE.squared()
			let p = caster.getOwner()
			let lvl = caster.getAbilityLevel(ThunderClap.ID)
			for hammer in StormHammer
				let hammerPos = hammer.getPos()
				if hammer.getPos().distanceToSq(casterPos) <= aoeSq
					if caster.hasItemById(ID) or hammer.getCaster().hasItemById(ID)
						new DummyCaster
						..origin(hammerPos)
						..owner(p)
						..castImmediate(DUMMY_ABIL_ID, lvl, OrderIds.thunderclap)
			


public class ResonatingMaulRecipe
	static constant CLASSIFICATION = "Permanent"
	static constant NAME = "{0} Recipe".format(ResonatingMaul.NAME)
	static constant ICON = Icons.bTNSnazzyScrollGreen
	static constant int SHOP_X = 2
	static constant int SHOP_Y = 1
	static constant int GOLD_COST = 600
	static constant int ID = compiletime(ITEM_ID_GEN.next())
	static constant int ALIAS_ID = compiletime(ITEM_ID_GEN.next())

	protected static let tooltipGenerator = ResonatingMaul.tooltipGenerator.copy()
		..setName(NAME)
		..addRecipeRequirement(Mindstaff.NAME, Mindstaff.GOLD_COST)
		..addRecipeRequirement(Mindstaff.NAME, Mindstaff.GOLD_COST)
		..addRecipeRequirement(SobiMask.NAME, SobiMask.GOLD_COST)
		..addRecipeRequirement(BlacksmithHammer.NAME, BlacksmithHammer.GOLD_COST)
		..addRecipeRequirement("Recipe", GOLD_COST)
		..setComment("")

	@compiletime protected static function build()
		ItemAlias.build(ID, ALIAS_ID) (ItemDefinition def, boolean isAlias) ->
			def..setLevel(1)
			..setLevelUnclassified(1)
			..setLumberCost(0)
			..setHitPoints(999999)
			..setNumberofCharges(0)
			..setStockMaximum(1)
			..setStockReplenishInterval(1)
			..setStockStartDelay(1)
			..setCanBeDropped(true)
			..setPerishable(false)
			..setActivelyUsed(false)
			..setCanBeSoldByMerchants(true)
			..setCanBeSoldToMerchants(true)
			..setAbilities("")
			..setGoldCost(GOLD_COST)
			..setButtonPositionX(SHOP_X)
			..setButtonPositionY(SHOP_Y)
			..setClassification(CLASSIFICATION)
			..setInterfaceIcon(isAlias ? ResonatingMaul.ICON : ICON)
			tooltipGenerator..setName(NAME)
			..applyToDef(def, true)
			if isAlias
				dalaranMerchant.addItemSold(def.getNewId())


init
	ResonatingMaul.onInit()
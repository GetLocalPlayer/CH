package LightningRod
import Assets
import ObjectIds
import ObjectIdGenerator
import ItemObjEditing
import AbilityObjEditing

import ItemTooltipGenerator
import ItemAbilityPreset
import ItemAlias
import DalaranMerchant
import Mindstaff
import StrongCane
import BlacksmithHammer

import LinkedList
import ItemCombine
import ChargedStrike
import ClosureEvents
import ClosureTimers
import ForkedLightning

public class LightningRod
	static constant CLASSIFICATION = "Permanent"
	static constant NAME = "Lightning Rod"
	static constant ICON = "ReplaceableTextures\\CommandButtons\\BTNLightningRod.blp"
	static constant int GOLD_COST = Mindstaff.GOLD_COST + StrongCane.GOLD_COST + BlacksmithHammer.GOLD_COST + LightningRodRecipe.GOLD_COST
	static constant int STRENGTH = BlacksmithHammer.STRENGTH + 5
	static constant int INTELLIGENCE = StrongCane.INTELLIGENCE + 4
	static constant int MANA = Mindstaff.MANA + 50
	static constant real MANA_REG_RATE = StrongCane.MANA_REG_RATE * 2
	static constant int ID = compiletime(ITEM_ID_GEN.next())
	static constant int ALIAS_ID = compiletime(ITEM_ID_GEN.next())
	
	protected static let tooltipGenerator = new ItemTooltipGenerator(NAME, "", GOLD_COST, "")
		..addPassiveEffect("\"{0}\" can bounce against the wearer, resetting cooldown of its \"{1}\".".format(ChargedStrike.NAME, ForkedLightning.NAME))
			
	@compiletime protected static function build()
		let attrDef = buildAttributeBonus(NAME, ICON, STRENGTH, 0, INTELLIGENCE, tooltipGenerator)
		let manaDef = buildManaBonus(NAME, ICON, MANA, tooltipGenerator)
		let manaRegDef = buildManaRegenerationBonus(NAME, ICON, MANA_REG_RATE, tooltipGenerator)
		ItemAlias.build(ID, ALIAS_ID)(ItemDefinition def, boolean isAlias) ->
			def..setLevel(1)
			..setLevelUnclassified(1)
			..setLumberCost(0)
			..setHitPoints(999999)
			..setNumberofCharges(0)
			..setStockMaximum(1)
			..setStockReplenishInterval(1)
			..setStockStartDelay(1)
			..setCanBeDropped(true)
			..setPerishable(false)
			..setActivelyUsed(false)
			..setCooldownGroup("")
			..setCanBeSoldByMerchants(true)
			..setCanBeSoldToMerchants(true)
			..setGoldCost(GOLD_COST)
			..setClassification(CLASSIFICATION)
			..setInterfaceIcon(ICON)
			tooltipGenerator.applyToDef(def)
			if not isAlias
				def.setAbilities(commaList(attrDef.getNewId(), manaDef.getNewId(), manaRegDef.getNewId()))

	protected static function onInit()
		new ItemCombine(LightningRod.ID, asList<int>(BlacksmithHammer.ID, StrongCane.ID, Mindstaff.ID, LightningRodRecipe.ID))

		ChargedStrike.onBounce() (unit target) ->
			if target.hasAbility(ForkedLightning.ABIL_ID)
				target.endAbilityCooldown(ForkedLightning.ABIL_ID)

		EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
			if EventData.getManipulatedItem().getTypeId() == ID
				ChargedStrike.addTargetsAllowed(EventData.getTriggerUnit())

		EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
			let u = EventData.getTriggerUnit()
			if EventData.getManipulatedItem().getTypeId() == ID
				nullTimer() -> 
					if not u.hasItemById(ID)
						ChargedStrike.removeTargetsAllowed(u)


public class LightningRodRecipe
	static constant CLASSIFICATION = "Permanent"
	static constant NAME = "{0} Recipe".format(LightningRod.NAME)
	static constant ICON = Icons.bTNSnazzyScrollGreen
	static constant ALIAS_ICON = LightningRod.ICON
	static constant int SHOP_X = 0
	static constant int SHOP_Y = 1
	static constant int GOLD_COST = 800
	static constant int ID = compiletime(ITEM_ID_GEN.next())
	static constant int ALIAS_ID = compiletime(ITEM_ID_GEN.next())

	protected static let tooltipGenerator = LightningRod.tooltipGenerator.copy()
		..setName(NAME)
		..addRecipeRequirement(BlacksmithHammer.NAME, BlacksmithHammer.GOLD_COST)
		..addRecipeRequirement(StrongCane.NAME, StrongCane.GOLD_COST)
		..addRecipeRequirement(Mindstaff.NAME, Mindstaff.GOLD_COST)
		..addRecipeRequirement("Recipe", GOLD_COST)
		..setComment("")

	@compiletime protected static function build()
		ItemAlias.build(ID, ALIAS_ID) (ItemDefinition def, boolean isAlias) ->
			def..setLevel(1)
			..setLevelUnclassified(1)
			..setLumberCost(0)
			..setHitPoints(999999)
			..setNumberofCharges(0)
			..setStockMaximum(1)
			..setStockReplenishInterval(1)
			..setStockStartDelay(1)
			..setCanBeDropped(true)
			..setPerishable(false)
			..setActivelyUsed(false)
			..setCanBeSoldByMerchants(true)
			..setCanBeSoldToMerchants(true)
			..setAbilities("")
			..setGoldCost(GOLD_COST)
			..setButtonPositionX(SHOP_X)
			..setButtonPositionY(SHOP_Y)
			..setClassification(CLASSIFICATION)
			..setInterfaceIcon(isAlias ? ALIAS_ICON : ICON)
			tooltipGenerator..setName(NAME)
			..applyToDef(def, true)
			if isAlias
				dalaranMerchant.addItemSold(def.getNewId())


init
	LightningRod.onInit()

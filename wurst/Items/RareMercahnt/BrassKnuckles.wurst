package BrassKnuckles
import Assets
import ItemObjEditing
import ChannelAbilityPreset

import ItemTooltipGenerator
import ItemAbilityPreset
import ItemAlias
import ItemCombine

import RareMerchant
import GlovesOfHaste
import ClawsOfAttack

import ClosureEvents
import ClosureTimers
import TimerUtils
import Preloader
import HashMap
import LinkedList


/* Works specifically with CustomHeroes of this map. */

public class BrassKnuckles
	static constant CLASSIFICATION = "Permanent"
	static constant NAME = "Brass Knuckles"
	static constant ICON = "ReplaceableTextures\\CommandButtons\\BTNBrassKnuckles.blp"
	static constant GOLD_COST = GlovesOfHaste.GOLD_COST + ClawsOfAttack.GOLD_COST + BrassKnucklesRecipe.GOLD_COST
	static constant ATTACK_DAMAGE = ClawsOfAttack.ATTACK_DAMAGE
	static constant ATTACK_RATE = GlovesOfHaste.ATTACK_RATE
	static constant ID = compiletime(ITEM_ID_GEN.next())
	static constant ALIAS_ID = compiletime(ITEM_ID_GEN.next())
	static constant ABIL_ID = compiletime(ABIL_ID_GEN.next())

	static constant PASSIVE_DESC = "Increases the owner's attack damage depending on its strength, agility, or intelligence value."
	static constant ACTIVE_DESC = "Switches the stat that's used as the source of the bonus attack damage."
	
	protected static let tooltipGenerator = new ItemTooltipGenerator(NAME, "", GOLD_COST, "")
		..addPassiveEffect(PASSIVE_DESC)
		..setActiveEffect(ACTIVE_DESC)
		..setComment("Do u now da wae?")
			
	@compiletime protected static function build()
		let adDef = buildAttackDamageBonus(NAME, ICON, ATTACK_DAMAGE, tooltipGenerator)
		let asDef = buildAttackSpeedBonus(NAME, ICON, ATTACK_RATE, tooltipGenerator)
		ItemAlias.build(ID, ALIAS_ID) (ItemDefinition def, boolean isAlias) ->
			def..setLevel(1)
			..setLevelUnclassified(1)
			..setLumberCost(0)
			..setHitPoints(999999)
			..setNumberofCharges(0)
			..setStockMaximum(1)
			..setStockReplenishInterval(1)
			..setStockStartDelay(1)
			..setCanBeDropped(true)
			..setPerishable(false)
			..setActivelyUsed(true)
			..setCooldownGroup(ABIL_ID.toRawCode())
			..setCanBeSoldByMerchants(true)
			..setCanBeSoldToMerchants(true)
			..setGoldCost(GOLD_COST)
			..setClassification(CLASSIFICATION)
			..setInterfaceIcon(ICON)
			tooltipGenerator.applyToDef(def)
			if not isAlias
				def.setAbilities("{0},{1},{2}".format(ABIL_ID.toRawCode(), adDef.getNewId().toRawCode(), asDef.getNewId().toRawCode()))
		new ChannelAbilityPreset(ABIL_ID, 1, true, null)
		..setCooldown(1, 1)
		..setTargetType(1, Targettype.NONE castTo int)
		..setDisableOtherAbilities(1, false)
		..setFollowThroughTime(1, 1)

	protected static function onInit()
		new ItemCombine(ID, asList<int>(ClawsOfAttack.ID, GlovesOfHaste.ID, BrassKnucklesRecipe.ID))


public class BrassKnucklesRecipe
	static constant CLASSIFICATION = "Permanent"
	static constant NAME = "{0} Recipe".format(BrassKnuckles.NAME)
	static constant ICON = Icons.bTNSnazzyScrollGreen
	static constant int SHOP_X = 0
	static constant int SHOP_Y = 2
	static constant int GOLD_COST = 250
	static constant int ID = compiletime(ITEM_ID_GEN.next())
	static constant int ALIAS_ID = compiletime(ITEM_ID_GEN.next())

	protected static let tooltipGenerator = BrassKnuckles.tooltipGenerator.copy()
		..setName(NAME)
		..addRecipeRequirement(GlovesOfHaste.NAME, GlovesOfHaste.GOLD_COST)
		..addRecipeRequirement(ClawsOfAttack.NAME, ClawsOfAttack.GOLD_COST)
		..addRecipeRequirement("Recipe", GOLD_COST)
		..setComment("")

	@compiletime protected static function build()
		ItemAlias.build(ID, ALIAS_ID) (ItemDefinition def, boolean isAlias) ->
			def..setLevel(1)
			..setLevelUnclassified(1)
			..setLumberCost(0)
			..setHitPoints(999999)
			..setNumberofCharges(0)
			..setStockMaximum(1)
			..setStockReplenishInterval(1)
			..setStockStartDelay(1)
			..setCanBeDropped(true)
			..setPerishable(false)
			..setActivelyUsed(false)
			..setCanBeSoldByMerchants(true)
			..setCanBeSoldToMerchants(true)
			..setAbilities("")
			..setGoldCost(GOLD_COST)
			..setButtonPositionX(SHOP_X)
			..setButtonPositionY(SHOP_Y)
			..setClassification(CLASSIFICATION)
			..setInterfaceIcon(isAlias ? BrassKnuckles.ICON : ICON)
			tooltipGenerator..setName(NAME)
			..applyToDef(def, true)
			if isAlias
				rareMerchant.addItemSold(def.getNewId())

		
init
	BrassKnuckles.onInit()
				

enum Attribute
	STR
	AGI
	INT


function unit.getAttribute(Attribute attr, bool includeBonus) returns int
	switch attr
		case Attribute.STR
			return this.getStr(includeBonus)
		case Attribute.AGI
			return this.getAgi(includeBonus)
		case Attribute.INT
			return this.getInt(includeBonus)


let whiteBonus = new HashMap<unit, int>
let usedAttr = new HashMap<unit, Attribute>
let damageMasks = compiletime(new LinkedList<int>)
let greenBonusId = compiletime(ABIL_ID_GEN.next())

@compiletime
function buildGreenBonus()
	new AbilityDefinitionAttackBonusPlus1(greenBonusId)
	..setLevels(2)
	..setIconNormal(BrassKnuckles.ICON)
	..setName(BrassKnuckles.NAME)
	..setItemAbility(false)
	..setAttackBonus(1, 0)
	..setAttackBonus(2, 0)

/* Basic attack damage changes aren't memorized for
different forms of a unit. That means, if a unit changes
its form via, for instance, metamorphosys ability, the
damage bonus will be reset.
Same truble we have if we give an ability to a unit
that can change its form. But, in case of an ability,
we can at least check if the unit is still having the
ability. So I give this dummy-ability non-permanently
to a unit to indicate if it has changed	its form and,
hence, reset the basic damage given in the code. */
let markerId = compiletime(ABIL_ID_GEN.next())

@compiletime
function buildMarker()
	new AbilityDefinitionAttackBonus(markerId)
	..setIconNormal(BrassKnuckles.ICON)
	..setName(BrassKnuckles.NAME + " marker")
	..setItemAbility(false)
	..setAttackBonus(1, 0)


function updateDamage(unit u)
	if not usedAttr.has(u)
		usedAttr.put(u, Attribute.STR)
	let whiteAttr = u.getAttribute(usedAttr.get(u), false)
	let greenAttr = u.getAttribute(usedAttr.get(u), true) - whiteAttr
	if not whiteBonus.has(u) or not u.hasAbility(markerId)
		whiteBonus.put(u, 0)
		u.addAbility(markerId)
	let whiteDamage = whiteBonus.get(u)
	if whiteDamage != whiteAttr
		u.setBaseDamage(u.getBaseDamage(0) + (whiteAttr - whiteDamage), 0)
		whiteBonus.put(u, whiteAttr)
	u.addPermanentAbility(greenBonusId)
	u.getAbility(greenBonusId)
	..setField(ABILITY_ILF_ATTACK_BONUS, 0, greenAttr)
	u..setAbilityLevel(greenBonusId, 2)
	..setAbilityLevel(greenBonusId, 1)


function clearDamage(unit u)
	if whiteBonus.has(u)
		u.setBaseDamage(u.getBaseDamage(0) - whiteBonus.get(u), 0)
	whiteBonus.remove(u)
	u..removeAbility(markerId)
	..removeAbility(greenBonusId)

let owners = CreateGroup()
let updateTimer = getTimer()
let updateInterval = ANIMATION_PERIOD // I use such a small period only because very few units will use the item


init
	preloadAbility(greenBonusId)

	let updateCb = updateTimer.doPeriodically(updateInterval) (CallbackPeriodic cb) ->
		for u in owners
			updateDamage(u)
	updateTimer.pause()

	EventListener.add(EVENT_PLAYER_UNIT_ATTACKED) ->
		let u = EventData.getAttackerUnit()
		if u.hasItemById(BrassKnuckles.ID) and u.isType(UNIT_TYPE_HERO)
			updateDamage(u)

	EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
		let u = EventData.getTriggerUnit()
		if u.isType(UNIT_TYPE_HERO) and u.hasAbility(BrassKnuckles.ABIL_ID)
			if owners.isEmpty()
				updateTimer.doPeriodically(updateInterval, updateCb)
			owners.add(u)
			updateDamage(u)

	EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
		let u = EventData.getTriggerUnit()
		if u.isType(UNIT_TYPE_HERO)
			nullTimer() -> 
				if u.hasAbility(BrassKnuckles.ABIL_ID)
					updateDamage(u)
				else if owners.has(u)
					owners.remove(u)
					if owners.isEmpty()
						updateTimer.pause()
					clearDamage(u)

	EventListener.onCast(BrassKnuckles.ABIL_ID) (unit caster) ->
		let s = usedAttr.get(caster)
		switch s
			case Attribute.STR
				usedAttr.put(caster, Attribute.AGI)
			case Attribute.AGI
				usedAttr.put(caster, Attribute.INT)
			case Attribute.INT
				usedAttr.put(caster, Attribute.STR)
		updateDamage(caster)
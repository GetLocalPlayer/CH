package Level
import Assets
import LinkedList
import ClosureEvents
import HashMap
import InitCustomHero
import ErrorHandling
import Base
import ProgressBar
import Portal


/**
	`Level` is an abstract class that defince a primitive level
	behaviour.

	A level is started when every alive customHero enters the
	level's entrance once (don't have to be in the rect all
	the time).

	Children must implement methods:
		onInit()
			// called before the very first wave is run
		onRun(int waveNumber)
			// called on each wave
		onFinish()
			// called when all enemies added via `addEnemy` are died
		onReset()
			// called when level is reset, used to clear the level and set everything again

	A level is over when all enemies are dead. Any enemy must be
	registered via `addEnemy(unit u)`, create all enemy units
	involved into a level and hide/show them in the level progress.
	This function can be called only in `onInit()` method. Registered
	enemies are also used in bar.
	The progress bar is using the enemies health to define what 
	part of the bar is coresponding to the enemy's death.
*/

public constant LEVEL_PROGRESS_BAR_TEXT = "Progress: {0}%"
public constant LEVEL_PORTAL_FX = Abilities.massTeleportTo
public constant real LEVEL_PORTAL_FX_SCALE = 1.1
public constant LEVEL_PORTAL_FX_AREA = Abilities.massTeleportCaster
public constant real LEVEL_PORTAL_FX_AREA_SCALE = 1
public constant LEVEL_PORTAL_FX_TARGET = Abilities.massTeleportTarget
public constant real LEVEL_PORTAL_FX_TARGET_SCALE = 1
public constant real LEVEL_PORTAL_AOE = 55
public constant real LEVEL_PORTAL_PING_DURATION = 5


let regionData = new HashMap<region, int>

function region.setData<T>(T data)
	regionData.put(this, data castTo int)

function region.getData<T>() returns T
	return regionData.get(this) castTo T


public abstract class Level
	private var maxWaves = 0
	private var waveCount = 0
	private let entranceReg = CreateRegion()
	private rect entranceRect  
	private let readyHeroes = CreateGroup()
	private let aliveEnemies = new LinkedList<group>
	private let deadEnemies = new LinkedList<group>

	private var started = false
	private var finished = false
	private var initializing = false
	private Portal portal = null
	private effect portalFx
	private vec2 exit

	private static let regTrg = CreateTrigger()
	private static let levels = new LinkedList<Level>
	private static let progressBar = new ProgressBar()

	construct(rect entrance, vec2 exit, int waves)
		_construct(entrance, exit, waves)

	construct(rect entrance, vec2 exit)
		_construct(entrance, exit, 1)

	private function _construct(rect entrance, vec2 exit, int maxWaves)
		this.entranceReg.addRect(entrance)
		this.exit = exit
		this.entranceRect = entrance
		this.maxWaves = maxWaves
		for i = 1 to maxWaves
			aliveEnemies.add(CreateGroup())
			deadEnemies.add(CreateGroup())
		regTrg.registerEnterRegion(this.entranceReg, null)
		this.entranceReg.setData<Level>(this)
		levels.add(this)

	ondestroy
		entranceReg.destr()
		readyHeroes.destr()
		for i = 0 to maxWaves - 1
			aliveEnemies.get(i).destr()
			deadEnemies.get(i).destr()
		destroy aliveEnemies
		destroy deadEnemies
		destroy portal
		levels.remove(this)
		destroy progressBar
		portalFx.destr()

	abstract function onInit()
	abstract function onRun(int waveNumber)
	abstract function onFinish()
	abstract function onReset()

	private function start()
		if started
			error("Cannot start a level in progress.")
		if finished
			error("Cannot start a finished Level, reset it first.")
		initializing = true
		onInit()
		initializing = false
		started = true
		var max = 0.0
		for g in aliveEnemies
			for u in g
				max += u.getMaxHP()
		progressBar..show()
		..setMinMax(0, max)
		..setValue(0)
		..setText(LEVEL_PROGRESS_BAR_TEXT.format("0"))
		runNextWave()

	private function runNextWave()
		waveCount++
		onRun(waveCount)
		
	private function finish()
		if finished
			error("Cannot finish a finished level.")
		finished = true
		started = false
		onFinish()
		if finished
			portal = new Portal(exit, LEVEL_PORTAL_AOE, (u) -> u == u.getOwner().getCustomHero())
			..setDestination(baseEntranceRect)
			..onEnter() (unit u, vec2 target) ->
				progressBar.hide(u.getOwner())
				addEffect(LEVEL_PORTAL_FX_AREA, u.getPos())
				..setScale(LEVEL_PORTAL_FX_AREA_SCALE)
				..destr()
				addEffect(LEVEL_PORTAL_FX_TARGET, target)
				..setScale(LEVEL_PORTAL_FX_TARGET_SCALE)
				..destr()
				u.getOwner().panCameraToTimed(target, 0)
			portalFx = addEffect(LEVEL_PORTAL_FX, portal.getPos())
			progressBar..setValue(progressBar.getMax())
			..setText(LEVEL_PROGRESS_BAR_TEXT.format("100"))
			PingMinimap(portal.getPos().x, portal.getPos().y, LEVEL_PORTAL_PING_DURATION)

	protected function onEnemyDeath(unit u)
		deadEnemies.get(waveCount - 1).add(u)
		let alive = aliveEnemies.get(waveCount - 1)
		alive.remove(u)
		progressBar..setValue(progressBar.getValue() + u.getMaxHP())
		..setText(LEVEL_PROGRESS_BAR_TEXT.format((progressBar.getValue() / progressBar.getMax() * 100).ceil().toString()))
		if alive.isEmpty()
			if waveCount == maxWaves
				finish()
			else
				runNextWave()

	protected function onEnemyRevived(unit u)
		if isInProgress()
			deadEnemies.get(waveCount - 1).remove(u)
			aliveEnemies.get(waveCount - 1).add(u)

	function reset() returns bool
		if initializing
			print("Cannot reset a level during its initialization.")
			return false
		finished = false
		started = false
		onReset()
		waveCount = 0
		readyHeroes.clear()
		for i = 0 to maxWaves - 1
			for u from aliveEnemies.get(i)
				u.remove()
			for u from deadEnemies.get(i)
				u.remove()
		if portal != null
			destroy portal
			portal = null
		portalFx.destr()
		return true

	function getEntrance() returns rect
		return entranceRect

	function getExit() returns vec2
		return exit
	
	function getMaxWaves() returns int
		return maxWaves

	function getCurrentWave() returns int
		return waveCount

	function hideProgressBar()
		progressBar.hide()

	function showProgressBar()
		progressBar.show()

	function getProgressBar() returns ProgressBar
		return progressBar

	function isInProgress() returns bool
		return started and not finished and not initializing

	function isFinished() returns bool
		return finished

	protected function getAliveEnemies(int wave) returns group
		return not finished and started and wave <= maxWaves and wave > 0 ? aliveEnemies.get(wave - 1) : null

	/** Returns alive enemies of the current wave. */
	protected function getAliveEnemies() returns group
		return getAliveEnemies(getCurrentWave())

	/** Returns a value only during level initializing. */
	protected function getReadyHeroes() returns group
		return initializing ? readyHeroes : null

	protected function addEnemy(unit u, int wave) returns bool
		if not initializing
			error("`addEnemy(unit)` can be called only during level initialization.")
		if wave > maxWaves
			error("This level can have only {0} waves, but {1} given!".format(maxWaves.toString(), wave.toString()))
		return u.isAlive() ? aliveEnemies.get(wave - 1).add(u) > 0 : deadEnemies.get(wave - 1).add(u) > 0

	private function onEnter(unit u)
		if not finished and not started and not readyHeroes.has(u)
			readyHeroes.add(u)
			if canStart()
				start()

	private function onCustomHeroDeath(unit u)
		if isInProgress()
			for hero in customHeroes
				if hero.isAlive()
					return
			reset() 
		if not finished and not started and not initializing and not readyHeroes.has(u)
			if canStart()
				start()

	private function onPlayerLeave(player p)
		if isInProgress()
			for u in customHeroes
				if u.getOwner() != p and u.isAlive()
					return
			reset()
		if not finished and not started and not initializing
			let u = p.getCustomHero()
			readyHeroes.remove(u)
			if canStart()
				start()

	private function canStart() returns bool
		var aliveCount = 0
		for u in customHeroes
			if u.isAlive()
				aliveCount++
		if aliveCount == 0
			return false
		for u in readyHeroes
			if u.isAlive()
				aliveCount--
		return aliveCount == 0

	protected static function staticInit()
		progressBar..setPoint(FRAMEPOINT_BOTTOMLEFT, getOriginFrame(ORIGIN_FRAME_MINIMAP), FRAMEPOINT_TOPLEFT, 0, 0.024)
		..setTextPoint(FRAMEPOINT_BOTTOMLEFT, FRAMEPOINT_TOPLEFT, 0.002, 0)
		..setSize(0.15, 0.012)
		..setMinMax(0, 100)
		..setValue(0)
		..hide()

		regTrg.addCondition(Condition(() -> begin
			let u = EventData.getEnteringUnit()
			return u.isAlive() and customHeroes.has(u)
		end))
		regTrg.addAction() ->
			let reg = GetTriggeringRegion()
			let level = reg.getData<Level>()
			if not level.finished and not level.started
				level.onEnter(EventData.getEnteringUnit())

		EventListener.add(EVENT_PLAYER_LEAVE) ->
			for level in levels
				level.onPlayerLeave(EventData.getTriggerPlayer())

		EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
			let u = EventData.getDyingUnit()
			if customHeroes.has(u)
				for level in levels
					level.onCustomHeroDeath(u)

		EventListener.add(EVENT_PLAYER_UNIT_DEATH) -> 
			let u = EventData.getDyingUnit()
			for level in levels
				if level.isInProgress() and level.aliveEnemies.get(level.waveCount - 1).has(u)
					level.onEnemyDeath(u)

		EventListener.add(EVENT_PLAYER_HERO_REVIVE_FINISH) ->
			let u = EventData.getTriggerUnit()
			for level in levels
				if level.isInProgress() and level.deadEnemies.get(level.waveCount - 1).has(u)
					level.onEnemyRevived(u)
	
init
	Level.staticInit()
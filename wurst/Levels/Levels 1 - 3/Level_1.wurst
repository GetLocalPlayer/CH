package Level_1
import OrderIds
import ForceProperties
import LevelTimerModule
import ScaledLevel


constant NORMAL_ID = 'n00D'
constant ELITE_ID = 'n01F'

// Per spawn rect
constant NORMAL_COUNT = 12
constant ELITE_COUNT = 4

constant WAVES = 2
constant DELAY = 4.

let entrance = gg_rct_Level_1_Entrance
let exit = gg_rct_Level_1_Portal

let leftSpawn = gg_rct_Level_1_Left
let rightSpawn = gg_rct_Level_1_Right

let gate = gg_dest_ZTd5_0357


public class Level_1 extends ScaledLevel
	use LevelTimerModule
	
	private static let instance = new Level_1

	static function instance() returns Level_1
		return instance

	private construct()
		super(entrance, exit.getCenter(), WAVES)
	
	override function onInit()
		let g = CreateGroup()
		for w = 1 to getMaxWaves()
			// Left
			for i = 1 to ELITE_COUNT
				g.add(createUnit(enemyPlayer, ELITE_ID, leftSpawn.randomPoint(), GetRandomReal(1, 360).asAngleDegrees()))
				g.add(createUnit(enemyPlayer, ELITE_ID, rightSpawn.randomPoint(), GetRandomReal(1, 360).asAngleDegrees()))
			for i = 1 to NORMAL_COUNT
				g.add(createUnit(enemyPlayer, NORMAL_ID, leftSpawn.randomPoint(), GetRandomReal(1, 360).asAngleDegrees()))
				g.add(createUnit(enemyPlayer, NORMAL_ID, rightSpawn.randomPoint(), GetRandomReal(1, 360).asAngleDegrees()))
			for u from g
				u..pause()
				..setInvulnerable(true)
				..hide()
				addEnemy(u, w)
		g.destr()

	override function onRun(int waveNumber)
		if waveNumber == 1
			gate.kill()
		doAfter(DELAY) -> 
			for u in getAliveEnemies()
				u..setInvulnerable(false)
				..unpause()
				..show()
				..issuePointOrderById(OrderIds.patrol, entrance.randomPoint())

	override function onFinish()
		clearTimers()

	override function onReset()
		clearTimers()
		gate.restoreLife(gate.getMaxLife(), true)
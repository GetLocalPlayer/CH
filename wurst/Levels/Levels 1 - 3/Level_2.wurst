package Level_2
import OrderIds
import LinkedList
import HashMap
import ForceProperties
import StoredClosureTimers
import ScaledLevel
import Preloader


constant NORMAL_ID = 'n00E'
constant ELITE_ID = 'n01G'

// Per patrol rect
constant NORMAL_COUNT = 6
constant ELITE_COUNT = 2

constant WAVES = 2
constant DELAY = 4.

let entrance = gg_rct_Level_2_Entrance
let exit = gg_rct_Level_2_Portal

// Clouterclockwise
let patrolRects = asList<rect>(
	gg_rct_Level_2_Top_Left,
	gg_rct_Level_2_Bottom_Left,
	gg_rct_Level_2_Bottom_Right,
	gg_rct_Level_2_Top_Right)


public class Level_2 extends ScaledLevel
	use MStoredClosureTimers
	private let orders = new HashMap<unit, rect>

	private static let instance = new Level_2(entrance, exit.getCenter(), WAVES)

	static function instance() returns Level_2
		return instance

	private construct(rect entrance, vec2 exit, int wavesCount)
		super(entrance, exit, wavesCount)
		let cond = Condition() ->
			let u = EventData.getTriggerUnit()
			return 	Level_2.instance().isInProgress()
					and u.isAlive()
					and (u.getTypeId() == NORMAL_ID or u.getTypeId() == ELITE_ID)
					and u.getOwner() == enemyPlayer

		for rct in patrolRects
			CreateTrigger()
			..registerRectEnterEventSource(rct)
			..addCondition(cond)
			..addAction() ->
				let triggeredRct = GetTriggeringTrigger().getSourceRect()
				let index = patrolRects.indexOf(triggeredRct)
				let u = EventData.getTriggerUnit()
				let targetRct = index < patrolRects.size() - 1 ? patrolRects.get(index + 1) : patrolRects.get(0)
				u.issuePointOrderById(OrderIds.attack, targetRct.getCenter())
				Level_2.instance().orders.put(u, targetRct)

	override function onInit()
		let g = CreateGroup()
		for w = 1 to getMaxWaves()
			for i = 1 to NORMAL_COUNT * patrolRects.size()
				g.add(createUnit(enemyPlayer, NORMAL_ID, entrance.randomPoint(), GetRandomReal(1, 360).asAngleDegrees()))
			for i = 1 to ELITE_COUNT * patrolRects.size()
				g.add(createUnit(enemyPlayer, ELITE_ID, entrance.randomPoint(), GetRandomReal(1, 360).asAngleDegrees()))
			for u from g
				u..pause()
				..setInvulnerable(true)
				..hide()
				addEnemy(u, w)
		g.destr()

	override protected function onEnemyDeath(unit u)
		orders.remove(u)
		super.onEnemyDeath(u)

	override function onRun(int waveNumber)
		if waveNumber == 1
			doPeriodically(5) (cb) ->
				for i = 1 to getMaxWaves()
					for u in getAliveEnemies(i)					
						if u.getCurrentOrder() == OrderIds.stop or u.getCurrentOrder() == 0
							u.issuePointOrderById(OrderIds.attack, orders.get(u).getCenter())

		doAfter(DELAY) -> 
			if GetRandomBoolean()
				/* I want to move the creeps randomly clockwise or
				counterclockwise in each wave, so I randomly revert
				the list on each wave. */
				for i = 1 to patrolRects.size() - 1
					patrolRects.addtoStart(patrolRects.removeAt(i))
			let normal = CreateGroup()
			let elites = CreateGroup()
			for u in getAliveEnemies(waveNumber)
				if u.getTypeId() == NORMAL_ID
					normal.add(u)
				if u.getTypeId() == ELITE_ID
					elites.add(u)
			for r in patrolRects
				for i = 1 to NORMAL_COUNT
					normal.next()
					..unpause()
					..setInvulnerable(false)
					..show()
					..setXY(r.getCenter())
				for i = 1 to ELITE_COUNT
					elites.next()
					..unpause()
					..setInvulnerable(false)
					..show()
					..setXY(r.getCenter())
			normal.destr()
			elites.destr()

	override function onFinish()
		clearTimers()

	override function onReset()
		clearTimers()
		orders.flush()

init
	preloadUnit(NORMAL_ID)
	preloadUnit(ELITE_ID)
			
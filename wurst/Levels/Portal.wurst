package Portal
import LinkedListModule
import ClosureForGroups
import TimerUtils


public abstract class PortalFilter
	abstract function run(unit u) returns bool


public abstract class PortalCallback
	abstract function run(unit u, vec2 target)


public class Portal
	use LinkedListModule
	private real range
	private var pos = ZERO2
	private var paused = false
	private rect destination
	private PortalFilter filter
	private PortalCallback cb = null
	
	private static let t = getTimer()

	construct(vec2 pos, real range, PortalFilter filter)
		this.range = range
		this.pos = pos
		this.filter = filter
		if size == 1
			t.startPeriodic(ANIMATION_PERIOD) ->
				for p in Portal
					if p.destination != null and not p.paused
						p.update()

	private function update()
		forUnitsInRange(pos, range, true) u ->
			if u.isAlive() and (filter == null or filter.run(u))
				let destPoint = destination.randomPoint()
				if cb != null
					cb.run(u, destPoint)
				if u.isInRange(pos, range)
					u..setPos(destPoint)
					..setFacing(GetRandomReal(1, 360).asAngleDegrees())

	ondestroy
		if filter != null
			destroy filter
		if cb != null
			destroy cb
		if size == 0
			t.pause()

	function pause()
		paused = true
	
	function unpause() 
		paused = false

	function setPos(vec2 pos)
		this.pos = pos

	function getPos() returns vec2
		return pos

	/** The unit isn't teleported yet. */
	function onEnter(PortalCallback cb)
		if this.cb != null
			destroy this.cb
		this.cb = cb

	function setDestination(rect destination)
		this.destination = destination
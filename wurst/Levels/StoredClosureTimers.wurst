package StoredClosureTimers
import LinkedList
import TimerUtils
import ClosureTimers


/* I bet I will regret this. 

I need to use timer callbacks within Level classes for
periodic events. Yet, I have to manually store  each single
timer callback to destroy it later in `onReset`/`onFinish`
methods. So I wrote this module that provides methods with
the same names:

	doAfter
	doPeriodically
	doPeriodicallyCounted
	doPeriodicallyTimed

Callbacks created in these methods are automatically added
in corresponing lists of the module. Then I need only call
`clearTimers` method of the module to destroy all the callbacks
stored. The callbacks remove themselves from the lists when
they're destroyed. 
This is a crap, but this crap lets me write less code. There's
no desctructor in the module so there's no memory freeing and
I use this only because all my levels won't have more than one
instance each of which is never destroyed.
The only warning is NOT TO CALL `clearTimers` before destroying
a timer callback in the callback's body, since you will try to
destroy a destroyed callback after it was destroyed in `clearTimers`.

	MyLevel.doPeriodicaly(time) cb ->
		...
		clearTimers() 	// <- `clearTimer` will destroy current
						// callback (cb)
		destroy cb		// <- A runtime error, an attempt to 
						// destroy a callback that was destroyed 
						// in `clearTimers`
		...

Because of this I use CallbackCounted instead of CallbackSingle
in `doAfter` method, since the nature of CallbackPeriodic and Counted
callbacks destroys them in next timer tic and not right after
the callbacks executions. */


module MStoredCallback
	protected LinkedList<thistype> list = null

	ondestroy
		if list != null
			list.remove(this)


public abstract class StoredCallbackSingle extends CallbackCounted
	use MStoredCallback

	abstract protected function _call()

	override protected function call(CallbackCounted cb)
		_call()


public abstract class StoredCallbackPeriodic extends CallbackPeriodic
	use MStoredCallback


public abstract class StoredCallbackCounted extends CallbackCounted
	use MStoredCallback


public module MStoredClosureTimers
	private let singleList = new LinkedList<StoredCallbackSingle>
	private let periodicList = new LinkedList<StoredCallbackPeriodic>
	private let countedList = new LinkedList<StoredCallbackCounted>

	protected function doAfter(real timeToWait, StoredCallbackSingle cb) returns StoredCallbackSingle
		getTimer().doPeriodicallyCounted(timeToWait, 1, cb)		
		singleList.add(cb)
		cb.list = singleList
		return cb

	protected function doPeriodically(real timeToWait, StoredCallbackPeriodic cb) returns StoredCallbackPeriodic
		getTimer().doPeriodically(timeToWait, cb)
		periodicList.add(cb)
		cb.list = periodicList
		return cb

	protected function doPeriodicallyCounted(real time, int callAmount, StoredCallbackCounted cb) returns StoredCallbackCounted
		getTimer().doPeriodicallyCounted(time, callAmount, cb)
		countedList.add(cb)
		cb.list = countedList
		return cb

	protected function doPeriodicallyTimed(real interval, real timerDuration, StoredCallbackCounted cb) returns CallbackCounted
		return doPeriodicallyCounted(interval, (timerDuration / interval + 0.5).toInt(), cb)
			
	protected function clearTimers()
		while not singleList.isEmpty()
			let cb = singleList.pop()
			cb.list = null
			destroy cb
		while not periodicList.isEmpty()
			let cb = periodicList.pop()
			cb.list = null
			destroy cb
		while not countedList.isEmpty()
			let cb = countedList.pop()
			cb.list = null
			destroy cb

			
	
package CustomHero
import ClosureEvents
import HashMap
import LinkedList
import LinkedListModule
import ClosureTimers

import ObjectIds
import ObjectIdGenerator
import AbilityObjEditing
import public ObjEditingCommons


/* Helps to build custom heroes with two forms - melee and ranged. */

constant COLLISION_SIZE = 32.

constant int MELEE_ATTACK_DAMAGE_BASE = 46
constant int MELEE_ATTACK_DAMAGE_NUMBER_OF_DICE = 2
constant int MELEE_ATTACK_DAMAGE_SIDES_PER_DICE = 4
constant int RANGER_ATTACK_DAMAGE_BASE = 7
constant int RANGER_ATTACK_DAMAGE_NUMBER_OF_DICE = 1
constant int RANGER_ATTACK_DAMAGE_SIDES_PER_DICE = 47
constant real ATTACK_COOLDOWN = 1.9
constant int ATTACK_RANGE = 600
constant ATTACK_TARGETS_ALLOWED = "ground,structure,debris,air,item,ward,enemy"
constant int MINIMUM_ATTACK_RANGE = 250 // For ranged attacks
constant MIMIMUM_RANGE_CIRCLE_COLOR = colorA(150, 150, 150, 100)
constant DEFENSE_BASE = 0

constant int MAX_HP = 350
constant int MAX_MANA = 50
constant real HP_REGEN = 1.
constant real MANA_REGEN = 0.5
constant real PROJECTILE_ARC = 0.15
constant int PROJECTILE_SPEED = 900
constant int SIGHT_RADIUS_DAY = 1800
constant int SIGHT_RADIUS_NIGHT = 800

constant int LUMBER_PER_LEVEL = 1
constant int STR_PER_ABIL_LEVEL = 1
constant int AGI_PER_ABIL_LEVEL = 1
constant int INT_PER_ABIL_LEVEL = 1
/** Each hero already has 1 skill point at first level. */
constant int SKILL_POINTS_PER_LEVEL = 3
//constant int STARTING_SKILL_POINTS = 15
constant int ATTR_ABIL_MAX_LEVEL = 50
constant STR_ABIL_ID = compiletime(ABIL_ID_GEN.next())
constant AGI_ABIL_ID = compiletime(ABIL_ID_GEN.next())
constant INT_ABIL_ID = compiletime(ABIL_ID_GEN.next())
constant STR_ICON = "ReplaceableTextures\\CommandButtons\\BTNstr.blp"
constant AGI_ICON = "ReplaceableTextures\\CommandButtons\\BTNagi.blp"
constant INT_ICON = "ReplaceableTextures\\CommandButtons\\BTNint.blp"
constant STR_ABIL_HOTKEY = "Q"
constant AGI_ABIL_HOTKEY = "W"
constant INT_ABIL_HOTKEY = "E"
constant PRIMARY_ATTRIBUTE = "INT"

constant ATTACK_SWITCHER_HOTKEY = "C"
constant real ATTACK_SWITCHER_COOLDOWN = 1
constant ATTACK_SWITCHER_TOOLTIP = "Current attack type: |cff96f162{0}|r"
constant ATTACK_SWITCHER_TOOLTIP_EXTENDED = "Changes the hero's attack type from melee to ranged and vice versa."
constant ATTACK_SWITCHER_MELEE = "Melee"
constant ATTACK_SWITCHER_RANGER = "Ranger"
constant ATTACK_SWITCHER_ENABLE_MELEE_ICON = "ReplaceableTextures\\CommandButtons\\BTNEnableMelee.blp"
constant ATTACK_SWITCHER_ENABLE_RANGER_ICON = "ReplaceableTextures\\CommandButtons\\BTNEnableRanger.blp"
constant ATTACK_SWITCHER_START_WITH_MELEE = true


public function unit.isCustomHero() returns bool
	return CustomHero.isUnitCustomhero(this)
	

enum CustomHeroEventIds
	ATTACK_SWITCH

abstract class CustomHero
	static abstract class AttackSwitchCallback
		use LinkedListModule
		abstract function call(unit u, bool isMelee)

	static function onAttackSwitch(AttackSwitchCallback cb) returns AttackSwitchCallback
		return cb

	static abstract class BuildCallback
		abstract function call(HeroDefinition def, bool isMelee)

	// Transfer data
	static let meleeIds = compiletime(new LinkedList<int>)
	static let rangerIds = compiletime(new LinkedList<int>)
	static let attackSwitcherIds = compiletime(new LinkedList<int>)
	
	private static BuildCallback basicBuild = (def, isMelee) -> begin
		def..setProperNamesUsed(0)
			..setName(isMelee ? "Melee" : "Ranger")
			..setProjectileImpactZ(60)
			..setHeroAbilities("{0},{1},{2}".format(STR_ABIL_ID.toRawCode(), AGI_ABIL_ID.toRawCode(), INT_ABIL_ID.toRawCode()))
			..setMovementType(MovementType.Foot)
			..setCollisionSize(COLLISION_SIZE)
			..setAttack1TargetsAllowed(ATTACK_TARGETS_ALLOWED)
			..setAttack1AttackType(isMelee ? AttackType.Normal : AttackType.Pierce)
			..setAttack1DamageBase(isMelee ? MELEE_ATTACK_DAMAGE_BASE : RANGER_ATTACK_DAMAGE_BASE)
			..setAttack1DamageSidesperDie(isMelee ? MELEE_ATTACK_DAMAGE_SIDES_PER_DICE : RANGER_ATTACK_DAMAGE_SIDES_PER_DICE)
			..setAttack1DamageNumberofDice(isMelee ? MELEE_ATTACK_DAMAGE_NUMBER_OF_DICE : RANGER_ATTACK_DAMAGE_NUMBER_OF_DICE)
			..setAttack1Range(isMelee ? 128 : ATTACK_RANGE)
			..setMinimumAttackRange(isMelee ? 0 : MINIMUM_ATTACK_RANGE)
			..setAttack1ProjectileSpeed(isMelee ? 0 : PROJECTILE_SPEED)
			..setAttack1ProjectileArc(isMelee ? 0 : PROJECTILE_ARC)
			..setAttack1WeaponType(isMelee ? WeaponType.Normal : WeaponType.Missile)
			..setAttack1ProjectileHomingEnabled(true)
			..setAttacksEnabled(1)
			..setDefenseBase(DEFENSE_BASE)
			..setProjectileLaunchX(0)
			..setProjectileLaunchY(0)
			..setProjectileLaunchZ(100)
			..setStartingStrength(0)
			..setStartingAgility(0)
			..setStartingIntelligence(0)
			..setStrengthPerLevel(0)
			..setAgilityPerLevel(0)
			..setIntelligencePerLevel(0)
			..setPrimaryAttribute(PRIMARY_ATTRIBUTE)
			..setHitPointsMaximumBase(MAX_HP)
			..setManaMaximum(MAX_MANA)
			..setHitPointsRegenerationRate(HP_REGEN)
			..setManaRegeneration(MANA_REGEN)
			..setHitPointsRegenerationType("always")
			..hideHeroDeathMsg(true)
			..setSightRadiusDay(SIGHT_RADIUS_DAY)
			..setSightRadiusNight(SIGHT_RADIUS_NIGHT)
			..setFoodCost(0)
	end

	static function build(HeroDefinition meleeFormDef, HeroDefinition rangerFormDef, BuildCallback buildCb) returns BuildCallback
		let swapFormAbilDef = new AbilityDefinitionIllidanMetamorphosis(ABIL_ID_GEN.next())
			..setLevels(1)
			..setLevelSkipRequirement(0)
			..setCheckDependencies(false)
			..setHeroAbility(false)
			..setAlternateFormHitPointBonus(1, 0)
			..setManaCost(1, 0)
			..setHotkeyNormal(ATTACK_SWITCHER_HOTKEY)
			..setCooldown(1, ATTACK_SWITCHER_COOLDOWN)
			..setDurationHero(1, 0)
			..setDurationNormal(1, 0)
			..setTooltipNormal(1, ATTACK_SWITCHER_TOOLTIP.format(ATTACK_SWITCHER_START_WITH_MELEE ? ATTACK_SWITCHER_MELEE : ATTACK_SWITCHER_RANGER))
			..setTooltipNormalExtended(1, ATTACK_SWITCHER_TOOLTIP_EXTENDED)
			..setButtonPositionNormalX(0)
			..setButtonPositionNormalY(0)
			..setNormalFormUnit(1, ATTACK_SWITCHER_START_WITH_MELEE ? meleeFormDef.getNewId().toRawCode() : rangerFormDef.getNewId().toRawCode())
			..setAlternateFormUnit(1, ATTACK_SWITCHER_START_WITH_MELEE ? rangerFormDef.getNewId().toRawCode() : meleeFormDef.getNewId().toRawCode())
			..setIconNormal(ATTACK_SWITCHER_START_WITH_MELEE ? ATTACK_SWITCHER_ENABLE_RANGER_ICON : ATTACK_SWITCHER_ENABLE_MELEE_ICON)
		attackSwitcherIds.add(swapFormAbilDef.getNewId())
		basicBuild.call(meleeFormDef, true)
		basicBuild.call(rangerFormDef, false)
		meleeFormDef.setNormalAbilities("AInv," + swapFormAbilDef.getNewId().toRawCode())
		rangerFormDef.setNormalAbilities("AInv," + swapFormAbilDef.getNewId().toRawCode())
		if buildCb != null
			buildCb.call(meleeFormDef, true)
			buildCb.call(rangerFormDef, false)
		meleeIds.add(meleeFormDef.getNewId())
		rangerIds.add(rangerFormDef.getNewId())
		return buildCb

	static function build(int meleeFormId, int rangerFormId, int originId, BuildCallback buildCb) returns BuildCallback
		return build(new HeroDefinition(meleeFormId, originId), new HeroDefinition(rangerFormId, originId), buildCb)
	
	static function build(int meleeFormId, int rangerId, BuildCallback buildCb) returns BuildCallback
		return build(meleeFormId, rangerId, 'Hpal', buildCb)
	
	static function build(int meleeFormId, BuildCallback buildCb) returns BuildCallback
		return build(meleeFormId, HERO_ID_GEN.next(), 'Hpal', buildCb)
	
	static function build(BuildCallback buildCb) returns BuildCallback
		return build(HERO_ID_GEN.next(), HERO_ID_GEN.next(), 'Hpal', buildCb)

	static function isUnitCustomhero(unit u) returns bool
		return meleeIds.has(u.getTypeId()) or rangerIds.has(u.getTypeId())
	

@compiletime function buildAttibuteLearningAbilities()
	new AbilityDefinitionIllidanChannel(STR_ABIL_ID)
	..setLevels(ATTR_ABIL_MAX_LEVEL)
	..setIconResearch(STR_ICON)
	..setHotkeyLearn(STR_ABIL_HOTKEY)
	..setTooltipLearn("Increases the hero's strength by {0}".format(STR_PER_ABIL_LEVEL.toString()))
	..setTooltipLearnExtended("")
	..setButtonPositionResearchX(0)
	..setButtonPositionResearchY(0)
	new AbilityDefinitionIllidanChannel(AGI_ABIL_ID)
	..setLevels(ATTR_ABIL_MAX_LEVEL)
	..setIconResearch(AGI_ICON)
	..setHotkeyLearn(AGI_ABIL_HOTKEY)
	..setTooltipLearn("Increases the hero's agility by {0}".format(AGI_PER_ABIL_LEVEL.toString()))
	..setTooltipLearnExtended("")
	..setButtonPositionResearchX(1)
	..setButtonPositionResearchY(0)
	new AbilityDefinitionIllidanChannel(INT_ABIL_ID)
	..setLevels(ATTR_ABIL_MAX_LEVEL)
	..setIconResearch(INT_ICON)
	..setHotkeyLearn(INT_ABIL_HOTKEY)
	..setTooltipLearn("Increases the hero's intelligence by {0}".format(INT_PER_ABIL_LEVEL.toString()))
	..setTooltipLearnExtended("")
	..setButtonPositionResearchX(2)
	..setButtonPositionResearchY(0)
	

init
	EventListener.add(EVENT_PLAYER_HERO_LEVEL) ->
		let levelingUnit = EventData.getLevelingUnit()
		let unitId = levelingUnit.getTypeId()
		if CustomHero.meleeIds.has(unitId) or CustomHero.rangerIds.has(unitId)
			levelingUnit.addSkillPoints(SKILL_POINTS_PER_LEVEL - 1)
			levelingUnit.getOwner().addLumber(LUMBER_PER_LEVEL)

	EventListener.add(EVENT_PLAYER_HERO_SKILL) ->
		switch EventData.getLearnedSkill()
			case STR_ABIL_ID
				EventData.getTriggerUnit().addStr(STR_PER_ABIL_LEVEL)
			case AGI_ABIL_ID
				EventData.getTriggerUnit().addAgi(AGI_PER_ABIL_LEVEL)
			case INT_ABIL_ID
				EventData.getTriggerUnit().addInt(INT_PER_ABIL_LEVEL)


init
	let rangedCircles = new HashMap<unit, effect>
	let circlesCallback = new HashMap<effect, CallbackPeriodic>

	EventListener.add(EVENT_PLAYER_UNIT_SPELL_EFFECT) ->
		let abilId = EventData.getSpellAbilityId()
		if CustomHero.attackSwitcherIds.has(abilId)
			let u = EventData.getTriggerUnit()
			let isMelee = u.isType(UNIT_TYPE_MELEE_ATTACKER)
			setAbilityIcon(abilId, isMelee ? ATTACK_SWITCHER_ENABLE_MELEE_ICON : ATTACK_SWITCHER_ENABLE_RANGER_ICON)
			setAbilityTooltip(abilId, ATTACK_SWITCHER_TOOLTIP.format(isMelee ? ATTACK_SWITCHER_RANGER : ATTACK_SWITCHER_MELEE), 0)
			for cb in CustomHero.AttackSwitchCallback
				cb.call(u, isMelee)
			// Attack range Circle
			if isMelee
				let eff = addEffect("Abilities\\AttackRangeCircle\\AttackRangeCircle.mdx", u.getPos())
				..setScale(MINIMUM_ATTACK_RANGE.toReal() + u.getCollisionSize())
				let clr = MIMIMUM_RANGE_CIRCLE_COLOR.withoutAlpha().withAlpha(u.getOwner() == localPlayer ? MIMIMUM_RANGE_CIRCLE_COLOR.alpha : 0)
				eff.setColor(clr)
				let cb = doPeriodically(ANIMATION_PERIOD) (CallbackPeriodic cb) ->
					eff.setPos(u.getPos3Real())
				rangedCircles.put(u, eff)
				circlesCallback.put(eff, cb)
			else
				if rangedCircles.has(u)
					let eff = rangedCircles.getAndRemove(u)
					destroy circlesCallback.getAndRemove(eff)
					eff.destr()

	EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
		let u = EventData.getDyingUnit()
		if rangedCircles.has(u)
			let eff = rangedCircles.getAndRemove(u)
			destroy circlesCallback.getAndRemove(eff)
			eff.destr()
		for cb in CustomHero.AttackSwitchCallback
			cb.call(u, u.isType(UNIT_TYPE_MELEE_ATTACKER))
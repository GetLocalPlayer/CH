package EnvenomedSpears
import Assets
import ObjectIdGenerator
import BuffObjEditing
import AbilityObjEditing
import AbilityTooltipGenerator
import AssassinShop
import AttackModifier

import HashMap
import TimerUtils
import Preloader


public class EnvenomedSpears
	static constant SHOP_COST = 1
	static constant LEVELS = 5
	static constant ICON = Icons.pASBTNEnvenomedSpear
	static constant NAME = "Envenomed Spears"
	static constant DESCRIPTION = "Deals poison damage per second. |cff969696Stacks with other units' envenomed spears.|r"
	static constant BUFF_DESCRIPTION = "This unit is poisoned; it will take damage over time."
	static constant TARGETS_ALLOWED = "air,ground,organic,enemy"
	static constant real DAMAGE_INTERVAL = 1
	static constant real DURATION = 15
	static constant real array DAMAGE = [40., 55., 70., 85., 100.]
	static constant ATTACK_TYPE = ATTACK_TYPE_NORMAL
	static constant DAMAGE_TYPE = DAMAGE_TYPE_MAGIC
	static constant WEAPON_TYPE = WEAPON_TYPE_WHOKNOWS

	static constant ID = compiletime(ABIL_ID_GEN.next())
	static constant BUFF = compiletime(createDummyBuffObject(NAME, BUFF_DESCRIPTION, ICON, Abilities.poisonStingTarget, "chest"))

	@compiletime
	private static function build()
		let tooltipGen = new AbilityTooltipGenerator(NAME, DESCRIPTION)
		new AttackModifier(ID, LEVELS, tooltipGen)
			..setIconNormal(ICON)
			..setArtTarget("")
			..setHeroAbility(true)
			..setRequirements("")
			..setRace(Race.Human)
			..setName(NAME)
			..registerTooltipGenerator(tooltipGen)
			..tooltipStartListen()
			..addTooltipProperty("Damage", (int lvl) -> DAMAGE[lvl - 1].toInt())
			..addTooltipProperty("Duration", (int lvl) -> DURATION) 			
			..tooltipStopListen()
		assassinShopDef.addAbilitySold(ID, true, ICON, NAME, tooltipGen.getTooltipLearnExtended(), SHOP_COST)

	private timer t = null
	private int remaining
	private unit caster
	private unit target
	private real damage

	ondestroy
		t.release()

	private static let targets = new HashMap<unit, IterableMap<unit, EnvenomedSpears>>

	static function apply(unit caster, unit target, int level)
		if not targets.has(target)
			targets.put(target, new IterableMap<unit, EnvenomedSpears>)
		if not targets.get(target).has(caster)
			targets.get(target).put(caster, new EnvenomedSpears)
		let venom = targets.get(target).get(caster)
		venom.remaining = (DURATION / DAMAGE_INTERVAL).toInt()
		venom.caster = caster
		venom.target = target
		venom.damage = DAMAGE[level - 1]
		target.addAbility(BUFF.abilId)
		if venom.t == null
			venom.t = getTimer()
			venom.t.setData(venom castTo int)
			venom.t.startPeriodic(DAMAGE_INTERVAL) ->
				(GetExpiredTimer().getData() castTo EnvenomedSpears).update()

	private function update()
		remaining--
		caster.damageTarget(target, damage, false, false, ATTACK_TYPE, DAMAGE_TYPE, WEAPON_TYPE)
		if remaining == 0
			targets.get(target).remove(caster)
			if targets.get(target).size() == 0
				destroy targets.get(target)
				targets.remove(target)
				target..removeAbility(BUFF.abilId)
				..removeAbility(BUFF.buffId)
			destroy this

	protected static function onInit()
		preloadAbility(BUFF.abilId)

		AttackModifier.onHit(ID) (unit caster, unit target, int level) ->
			apply(caster, target, level)
			return true


init
	EnvenomedSpears.onInit()
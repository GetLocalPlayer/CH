package StoneSpears
import ObjectIdGenerator
import AbilityObjEditing
import AbilityTooltipGenerator
import EarthServantShop
import AttackModifier

import ClosureTimers
import ClosureForGroups
import Interpolation


class StoneSpears
	static constant int SHOP_COST = 1
	static constant int LEVELS = 5
	static constant ICON = "ReplaceableTextures\\CommandButtons\\PASBTNStoneSpears.blp"
	static constant NAME = "Stone Spears"
	static constant DESCRIPTION = "The hero's attacks have a chance to spawn a stone shard on hit. The shard attacks the target's location or the first enemy on its path, dealing damage in an area. |n|n[|cffff0000Attack Modifier|r]"
	static constant BUFF_DESCRIPTION = "Ground beneath this unit's feet is shaking."
	static constant TARGETS_ALLOWED = "air,ground,enemy"
	static constant int array CHANCE = [35, 45, 55, 65, 75]
	static constant real DAMAGE = 80
	static constant real SPAWN_RANGE = 75
	static constant real SPAWN_TIME = 0.5
	static constant real PROJECTILE_SPEED = 1500
	static constant real PROJECTILE_COLLISIONO_SIZE = 20
	static constant PROJECTILE_MODEL = "Abilities\\StoneSpear\\StoneSpear.mdx"
	static constant real AOE = 175

	static constant ID = compiletime(ABIL_ID_GEN.next())

	@compiletime
	private static function build()
		let tooltipGen = new AbilityTooltipGenerator(NAME, DESCRIPTION)
		new AttackModifier(ID, LEVELS, tooltipGen)
		..setIconNormal(ICON)
		..setArtTarget("")
		..setHeroAbility(true)
		..setRequirements("")
		..setRace(Race.Human)
		..setName(NAME)
		..registerTooltipGenerator(tooltipGen)
		..tooltipStartListen()
		..addTooltipProperty("Damage", (int lvl) -> DAMAGE.toInt())
		..addTooltipProperty("Chance", (int lvl) -> CHANCE[lvl - 1])
		..presetAreaofEffect((lvl) -> AOE)
		..tooltipStopListen()
		earthServantShopDef.addAbilitySold(ID, true, ICON, NAME, tooltipGen.getTooltipLearnExtended(), SHOP_COST)

	protected static function onInit()
		AttackModifier.onHit(ID) (unit caster, unit target, int level) ->
			if GetRandomInt(1, 100) <= CHANCE[level - 1]
				apply(caster, target)
			return true
			

	static function apply(unit caster, unit target)
		let attackerPos = caster.getPos()
		let spawnDir = attackerPos.normalizedPointerTo(target.getPos()).rotate((GetRandomReal(120., 220.)) .asAngleDegrees())
		let startSpawnPos = attackerPos.withTerrainZ() + spawnDir * SPAWN_RANGE
		let endSpawnPos = attackerPos.withTerrainZ(350) + spawnDir * SPAWN_RANGE * 2
		let projectile = addEffect(PROJECTILE_MODEL, startSpawnPos)
		..setYaw(startSpawnPos.angleTo2d(target.getPos()))
		let targetPos = target.getPos3Real()
		let callAmount = (SPAWN_TIME / ANIMATION_PERIOD).toInt()
		doPeriodicallyCounted(ANIMATION_PERIOD, callAmount) (CallbackCounted cbSpawn) ->
			projectile..setPos(startSpawnPos.lerp(endSpawnPos, (callAmount - cbSpawn.getCount())/callAmount))
			..setRoll(projectile.getPos().angleTo(target.getPos()))
			if cbSpawn.isLast()
				let projectileOffset = PROJECTILE_SPEED * ANIMATION_PERIOD
				let projectileOffsetSq = projectileOffset.squared()
				doPeriodically(ANIMATION_PERIOD) (CallbackPeriodic cbMove) ->
					let projectilePos = projectile.getPos3()
					ENUM_GROUP.enumUnitsInRange(projectilePos.toVec2(), PROJECTILE_COLLISIONO_SIZE + MAX_COLLISION_SIZE, null)
					for u in ENUM_GROUP
						if u.isAllyOf(caster) or not u.isAlive() or u.isType(UNIT_TYPE_MAGIC_IMMUNE) or not u.isInRange(projectilePos.toVec2(), PROJECTILE_COLLISIONO_SIZE)
							ENUM_GROUP.remove(u)
					let isCollided = not ENUM_GROUP.isEmpty()
					ENUM_GROUP.clear()
					if not isCollided and projectilePos.distanceToSq(targetPos) > projectileOffsetSq
						projectile..setPos(projectilePos.moveTowards(targetPos, projectileOffset))
						..setYaw(projectilePos.angleTo2d(targetPos.toVec2()))
					else
						if not isCollided
							projectile.setPos(targetPos)
						projectile.destr()
						destroy cbMove
						forUnitsInRange(projectile.getPos(), AOE, true) (unit u) ->
							if u.isEnemyOf(caster) and u.isAlive() and not u.isType(UNIT_TYPE_MAGIC_IMMUNE)
								caster.damageTarget(u, DAMAGE, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, WEAPON_TYPE_WHOKNOWS)


init
	StoneSpears.onInit()
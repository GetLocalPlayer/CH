package SeedOfCorruption
import Assets
import BuffObjEditing
import ChannelAbilityPreset
import AbilityTooltipGenerator
import CurseMasterShop
import HotkeyFactory

import ClosureEvents
import ClosureForGroups
import ClosureTimers
import HashMap
import Preloader


class SeedOfCorruption
	static constant int SHOP_COST = 1
	static constant int LEVELS = 5
	static constant HOTKEY = getHotkey()
	static constant ICON = "ReplaceableTextures\\CommandButtons\\BTNSeedOfCorruption.blp"
	static constant NAME = "Seed of Corruption"
	static constant DESCRIPTION = "Reduces a target enemy's armor. If the target dies under the effect, the seed explodes reducing nearby enemies armor."
	static constant BUFF_DESCRIPTION = "This unit's armor reduced."

	static constant PROJECTILE_MODEL = Abilities.orbCorruptionMissile
	static constant int PROJECTILE_SPEED = 650
	static constant real PROJECTILE_ARC = 0.2

	static constant FX_PRIMARY = Abilities.banishTarget
	static constant FX_SECONDARY = Abilities.carrionSwarmDamage
	static constant FX_EXPLOSION = Abilities.deathCoilSpecialArt
	static constant FX_EXPLOSION_ATTACH = "origin"

	static constant real array PRIMARY_REDUCTION = [2.0, 2.5, 3.0, 3.5, 4.0]
	static constant real array SECONDARY_ARMOR_REDUCTION = [0.5, 0.5, 0.5, 0.5, 0.5]

	static constant real CAST_RANGE = 550.
	static constant real AOE = 300
	static constant real DURATION = 18.
	static constant real COOLDOWN = 8.
	static constant int array MANACOST = [90, 100, 110, 120, 130]
	static constant TARGETS_ALLOWED = "air,ground,enemy,organic"

	static constant ID = compiletime(ABIL_ID_GEN.next())
	static constant BUFF_ID = compiletime(BUFF_ID_GEN.next())
	static constant PRIMARY_BUFF = buffTuple(compiletime(ABIL_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()))
	static constant SECONDARY_BUFF = buffTuple(compiletime(ABIL_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()))


	@compiletime
	private static function build()
		let tooltipGen = new AbilityTooltipGenerator(NAME, DESCRIPTION)
		..addPropertyPostfix("Explosion Armor Reduction", "% of primary effect")
		new AbilityDefinitionAlchemistAcidBomb(ID)
		..setIconNormal(ICON)
		..setName(NAME)
		..presetHotkey(HOTKEY)
		..setMissileArt(PROJECTILE_MODEL)
		..setMissileSpeed(PROJECTILE_SPEED)
		..setMissileArc(PROJECTILE_ARC)
		..registerTooltipGenerator(tooltipGen)
		..tooltipStartListen()
		..setLevels(LEVELS)
		..addTooltipProperty("Armor Reduction", (int lvl) -> PRIMARY_REDUCTION[lvl - 1])
		..addTooltipProperty("Explosion Armor Reduction", (int lvl) -> (SECONDARY_ARMOR_REDUCTION[lvl - 1] * 100).toInt())
		..presetManaCost((int lvl) -> MANACOST[lvl - 1])
		..presetCooldown((int lvl) -> COOLDOWN)
		..presetDurationNormal((int lvl) -> DURATION)
		..presetAreaofEffect((lvl) -> AOE)
		..presetCastRange((int lvl) -> CAST_RANGE)
		..tooltipStopListen()
		..presetDurationHero((lvl) -> DURATION)
		..presetArmorPenalty((lvl) -> 0)
		..presetPrimaryDamage((lvl) -> 0)
		..presetSecondaryDamage((lvl) -> 0)
		..presetAreaofEffect((lvl) -> 0)
		..presetDamageInterval((lvl) -> 1000)
		..presetTargetsAllowed((lvl) -> TARGETS_ALLOWED)
		..presetBuffs((lvl) -> BUFF_ID.toRawCode())
		curseMasterShopDef.addAbilitySold(ID, false, ICON, NAME, tooltipGen.getTooltipLearnExtended(), SHOP_COST)
		// Main target buff
		new AbilityDefinitionPaladinDevotionAura(PRIMARY_BUFF.abilId)
		..setLevels(LEVELS)
		..setIconNormal(ICON)
		..setName(NAME)
		..setArtTarget(FX_PRIMARY)
		..presetDurationHero((int lvl) -> 0)
		..presetDurationNormal((int lvl) -> 0)
		..presetTargetsAllowed((lvl) -> "self")
		..presetBuffs((lvl) -> PRIMARY_BUFF.buffId.toRawCode())
		..presetArmorBonus((lvl) -> -PRIMARY_REDUCTION[lvl - 1])
		..presetPercentBonus((lvl) -> false)
		new BuffDefinition(PRIMARY_BUFF.buffId, 'Basl')
		..setName(1, NAME)
		..setIcon(ICON)
		..setTooltipNormal(1, "|cffff0000{0}|r".format(NAME))
		..setTooltipNormalExtended(1, BUFF_DESCRIPTION)
		..setArtTarget(1, "")
		// Explosion buff
		new AbilityDefinitionPaladinDevotionAura(SECONDARY_BUFF.abilId)
		..setLevels(LEVELS)
		..setIconNormal(ICON)
		..setName(NAME)
		..setArtTarget(FX_SECONDARY)
		..presetDurationHero((int lvl) -> 0)
		..presetDurationNormal((int lvl) -> 0)
		..presetTargetsAllowed((lvl) -> "self")
		..presetBuffs((lvl) -> SECONDARY_BUFF.buffId.toRawCode())
		..presetArmorBonus((lvl) -> -PRIMARY_REDUCTION[lvl - 1] * SECONDARY_ARMOR_REDUCTION[lvl - 1])
		..presetPercentBonus((lvl) -> false)
		new BuffDefinition(SECONDARY_BUFF.buffId, 'Basl')
		..setName(1, NAME)
		..setIcon(ICON)
		..setTooltipNormal(1, "|cffff0000{0}|r".format(NAME))
		..setTooltipNormalExtended(1, BUFF_DESCRIPTION)
		..setArtTarget(1, "")


	protected static function onInit()
		Preload(FX_EXPLOSION)
		preloadAbility(PRIMARY_BUFF.abilId)
		preloadAbility(SECONDARY_BUFF.abilId)

		let affectedPrim = new HashMap<unit, CallbackSingle>
		let affectedSec = new HashMap<unit, CallbackSingle>
		let targetCaster = new HashMap<unit, unit>

		EventListener.add(EVENT_PLAYER_UNIT_DAMAGING) ->
			let target = EventData.getTriggerUnit()
			if target.hasAbility(BUFF_ID)
				target.removeAbility(BUFF_ID)
				let caster = EventData.getEventDamageSource()
				let lvl = caster.getAbilityLevel(ID)
				if affectedPrim.has(target)
					destroy affectedPrim.getAndRemove(target)
					target..removeAbility(PRIMARY_BUFF.buffId)
					..setAbilityLevel(PRIMARY_BUFF.abilId, lvl)
				else
					target..addAbility(PRIMARY_BUFF.abilId)
					..makeAbilityPermanent(PRIMARY_BUFF.abilId, true)
					..removeAbility(PRIMARY_BUFF.buffId)
					..setAbilityLevel(PRIMARY_BUFF.abilId, lvl)
					..hideAbility(PRIMARY_BUFF.abilId, true)
				targetCaster.put(target, caster)
				let cb = doAfter(DURATION) ->
					affectedPrim.remove(target)
					target..removeAbility(PRIMARY_BUFF.abilId)
					..removeAbility(PRIMARY_BUFF.buffId)
					..hideAbility(PRIMARY_BUFF.abilId, false)
					targetCaster.remove(target)
				affectedPrim.put(target, cb)

		EventListener.add(EVENT_PLAYER_UNIT_DEATH) () ->
			let target = EventData.getDyingUnit()
			if affectedPrim.has(target)
				let lvl = target.getAbilityLevel(PRIMARY_BUFF.abilId)
				let caster = targetCaster.get(target)
				flashEffect(FX_EXPLOSION, target, FX_EXPLOSION_ATTACH)
				forUnitsInRange(target.getPos(), AOE, true) (unit u) ->
					if u.isEnemyOf(caster) and not u.isType(UNIT_TYPE_MAGIC_IMMUNE) and u.isAlive()
						flashEffect(FX_EXPLOSION, u, FX_EXPLOSION_ATTACH)
						if affectedSec.has(u)
							destroy affectedSec.getAndRemove(u)
							u..removeAbility(SECONDARY_BUFF.buffId)
							..setAbilityLevel(SECONDARY_BUFF.abilId, lvl)
						else
							u..addAbility(SECONDARY_BUFF.abilId)
							..makeAbilityPermanent(SECONDARY_BUFF.abilId, true)
							..removeAbility(SECONDARY_BUFF.buffId)
							..setAbilityLevel(SECONDARY_BUFF.abilId, lvl)
							..hideAbility(SECONDARY_BUFF.buffId, true)
						let cb = doAfter(DURATION) ->
							affectedSec.remove(u)
							u..removeAbility(SECONDARY_BUFF.abilId)
							..removeAbility(SECONDARY_BUFF.buffId)
							..hideAbility(SECONDARY_BUFF.buffId, false)
						affectedSec.put(u, cb)
				target..removeAbility(PRIMARY_BUFF.abilId)
				..removeAbility(PRIMARY_BUFF.buffId)
				destroy affectedPrim.getAndRemove(target)
				targetCaster.remove(target)
				target.hideAbility(PRIMARY_BUFF.abilId, false)

		EventListener.add(EVENT_PLAYER_UNIT_DEATH) () ->
			let u = EventData.getDyingUnit()
			if affectedSec.has(u)
				destroy affectedSec.getAndRemove(u)
				u..removeAbility(SECONDARY_BUFF.abilId)
				..removeAbility(SECONDARY_BUFF.buffId)
				..hideAbility(SECONDARY_BUFF.buffId, false)


init
	SeedOfCorruption.onInit()
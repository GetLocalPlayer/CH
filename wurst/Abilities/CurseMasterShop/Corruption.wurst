package Corruption
import Assets
import BuffObjEditing
import ChannelAbilityPreset
import AbilityTooltipGenerator
import CurseMasterShop
import HotkeyFactory

import ClosureEvents
import ClosureForGroups
import ClosureTimers
import HashMap
import Preloader


class Corruption
	static constant int SHOP_COST = 1
	static constant int LEVELS = 5
	static constant HOTKEY = getHotkey()
	static constant ICON = Icons.bTNSacrificialSkull
	static constant NAME = "Corruption"
	static constant DESCRIPTION = "Reduces armor of the enemies in the chosen direction."
	static constant BUFF_DESCRIPTION = "This unit's armor reduced."

	static constant PROJECTILE_MODEL = Abilities.deathCoilMissile
	static constant real PROJECTILE_SPEED = 900
	static constant real PROJECTILE_SCALE = 1.7

	static constant FX_TARGET = Abilities.banishTarget
	static constant FX_TARGET_ATTACH = "origin"

	static constant int PRIMARY_REDUCTION = 2
	static constant int SECONDARY_REDUCTION = 1

	static constant real CAST_RANGE = 850.
	static constant real AOE = 150
	static constant real array DURATION = [18, 18, 18, 18, 18]
	static constant real array COOLDOWN = [10, 8, 6, 4, 2]
	static constant int array MANACOST = [90, 90, 90, 90, 90]

	static constant ID = compiletime(ABIL_ID_GEN.next())

	static constant BUFF = compiletime(createDummyBuffObject(NAME, BUFF_DESCRIPTION, ICON, FX_TARGET, FX_TARGET_ATTACH))
	private static constant ARMOR_ABIL_ID = compiletime(ABIL_ID_GEN.next())

	@compiletime
	private static function build()
		let tooltipGen = new AbilityTooltipGenerator(NAME, DESCRIPTION)
		new ChannelAbilityPreset(ID, LEVELS, true, tooltipGen)
		..setIconNormal(ICON)
		..setName(NAME)
		..presetHotkey(HOTKEY)
		..tooltipStartListen()
		..setLevels(LEVELS)
		..addTooltipProperty("Armor Reduction", (int lvl) -> PRIMARY_REDUCTION)
		..addTooltipProperty("Reapplication Armor Reduction", (int lvl) -> SECONDARY_REDUCTION)
		..presetManaCost((int lvl) -> MANACOST[lvl - 1])
		..presetCooldown((int lvl) -> COOLDOWN[lvl - 1])
		..presetDurationNormal((int lvl) -> DURATION[lvl - 1])
		..presetAreaofEffect((lvl) -> AOE)
		..presetCastRange((int lvl) -> CAST_RANGE)
		..tooltipStopListen()
		..presetOption(Option.VISIBLE, true)
		..presetTargetTypes(Targettype.POINT)
		curseMasterShopDef.addAbilitySold(ID, false, ICON, NAME, tooltipGen.getTooltipLearnExtended(), SHOP_COST)

		new AbilityDefinitionDefenseBonusPlus1(ARMOR_ABIL_ID)
		..setIconNormal(ICON)
		..setName(NAME)
		..setLevels(2)
		..presetDefenseBonus((int lvl) -> -PRIMARY_REDUCTION)

	protected static function onInit()
		Preload(FX_TARGET)
		preloadAbility(BUFF.abilId)
		preloadAbility(ARMOR_ABIL_ID)

		let buffTimers = new HashMap<unit, CallbackSingle>
		
		EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
			let u = EventData.getDyingUnit()
			if buffTimers.has(u)
				destroy buffTimers.getAndRemove(u)
				u..removeAbility(BUFF.abilId)
				..removeAbility(BUFF.buffId)
				..removeAbility(ARMOR_ABIL_ID)

		EventListener.onPointCast(ID) (unit caster, vec2 target) ->
			let pos = caster.getPos()
			let fx = addEffect(PROJECTILE_MODEL, pos)
			..setYaw(pos.angleTo(target))
			..setScale(PROJECTILE_SCALE)
			let duration = DURATION[caster.getAbilityLevel(ID) - 1]
			let offset = pos.normalizedPointerTo(target) * PROJECTILE_SPEED * ANIMATION_PERIOD
			let affected = CreateGroup()
			doPeriodicallyTimed(ANIMATION_PERIOD, CAST_RANGE / PROJECTILE_SPEED) (CallbackCounted cb) ->
				let newPos = fx.getPos() + offset
				forUnitsInRange(newPos, AOE, true) (unit u) ->
					if u.isAlive() and not u.isType(UNIT_TYPE_MAGIC_IMMUNE) and u.isEnemyOf(caster) and not affected.has(u)
						if u.hasAbility(BUFF.abilId)
							destroy buffTimers.get(u)
							let abil = u.getAbility(ARMOR_ABIL_ID)
							let curr = abil.getField(ABILITY_ILF_DEFENSE_BONUS_IDEF, 0)
							abil.setField(ABILITY_ILF_DEFENSE_BONUS_IDEF, 0, curr - SECONDARY_REDUCTION)
							u..setAbilityLevel(ARMOR_ABIL_ID, 2)
							..setAbilityLevel(ARMOR_ABIL_ID, 1) 
						else
							u..addAbility(ARMOR_ABIL_ID)
							..addAbility(BUFF.abilId)
						let cb = doAfter(duration) -> 
							buffTimers.remove(u)
							u..removeAbility(BUFF.abilId)
							..removeAbility(BUFF.buffId)
							..removeAbility(ARMOR_ABIL_ID)
						buffTimers.put(u, cb)
						affected.add(u)
				fx.setPos(newPos)
				if cb.isLast()
					fx.destr()
					affected.destr()

init
	Corruption.onInit()
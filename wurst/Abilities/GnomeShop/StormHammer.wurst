package StormHammer
import Assets
import BuffObjEditing
import ChannelAbilityPreset
import AbilityTooltipGenerator
import GnomeShop
import HotkeyFactory

import Interpolation
import ClosureTimers
import ClosureForGroups
import LigthingEx
import Stun
import ClosureEvents
import LinkedListModule
import HashMap
import Preloader



public class StormHammer
	static constant SHOP_COST = 1
	static constant LEVELS = 5
	static constant HOTKEY = getHotkey()
	static constant ICON = Icons.bTNStormBolt
	static constant NAME = "Storm Hammer"
	static constant DESCRIPTION = "Hurls a magic hammer in the center of a target area that deals damage on landing. While the hammer exists it's hitting a nearby random enemy with lightning, dealing slight damage and marking the target. Strom Hammer deals incresed damage to the marked enemies on landing, stunning them."
	
	static constant MANACOST = [145, 165, 185, 205, 225]
	static constant STUN_DURATION = 2.
	static constant COOLDOWN = 10.
	static constant AOE = 200.
	static constant CAST_RANGE = 750.

	static constant LANDING_DAMAGE = [75., 90., 105., 120., 135.]
	static constant LANDING_EFFECT = Abilities.thunderclapCaster

	static constant HAMMER_LIFETIME = 10.

	static constant LIGHTNING_DAMAGE = [10., 12., 14., 16., 18.]
	static constant LIGHTNING_INTERVAL = 1.
	static constant LIGHTNING_CODE = LIGHTNING_CHAIN_LIGHTNING_SEECONDARY
	static constant LIGHTNING_IMPACT_EFFECT = Abilities.boltImpact
	static constant LIGHTNING_IMPACT_ATTACH = "chest"
	static constant LIGHTNING_IMPACT_OFFSET = vec3(0, 0, 50)

	static constant ATTACK_TYPE = ATTACK_TYPE_NORMAL
	static constant DAMAGE_TYPE = DAMAGE_TYPE_MAGIC
	static constant WEAPON_TYPE = WEAPON_TYPE_WHOKNOWS

	static constant MARK_BUFF = compiletime(createDummyBuffObject(NAME, "This unit is marked by a storm hammer.", ICON, "Abilities\\StromHammer\\StormHammerTarget.mdx", "chest"))
	static constant MARK_DURATION = 15.
	static constant MARK_DAMAGE_MULTIPLIER = 2

	static constant PROJECTILE_MODEL =  "Abilities\\StromHammer\\StormHammerMissile.mdx" // Uses "birth" animation for the flight and "stand" for the lightning attacks.
	static constant real PROJECTILE_SCALE = 1.5
	static constant real PROJECTILE_BIRTH_TIME_SCALE = 3.5
	static constant real PROJECTILE_STAND_TIME_SCALE = 1.
	static constant real PROJECTILE_DEATH_TIME_SCALE = 1.
	static constant real PROJECTILE_SPEED = 375.
	static constant real PROJECTILE_ARC_FACTOR = 0.6 // factor for distance to the target

	static constant ABIL_ID = compiletime(ABIL_ID_GEN.next())

	@compiletime
	private static function build()
		let tooltipGen = new AbilityTooltipGenerator(NAME, DESCRIPTION)
		new ChannelAbilityPreset(ABIL_ID, LEVELS, true)
		..setIconNormal(ICON)
		..setName(NAME)
		..presetHotkey(HOTKEY)
		..setHeroAbility(true)
		..setRequirements("")
		..setRace(Race.Human)
		..setArtTarget("")
		..registerTooltipGenerator(tooltipGen)
		..tooltipStartListen()
		..setLevels(LEVELS)
		..presetManaCost((int lvl) -> MANACOST[lvl - 1])
		..presetCooldown((int lvl) -> COOLDOWN)
		..addTooltipProperty("Landing Damage", (int lvl) -> LANDING_DAMAGE[lvl - 1].toInt())
		..addTooltipProperty("Hammer Difetime", (int lvl) -> HAMMER_LIFETIME.toString() + " sec.")
		..addTooltipProperty("Lightning Damage", (int lvl) -> LIGHTNING_DAMAGE[lvl - 1].toInt())
		..addTooltipProperty("Mark Duration", (int lvl) -> MARK_DURATION.toString() + " sec.")
		..addTooltipProperty("Mark Damage Multiplier", (int lvl) -> MARK_DAMAGE_MULTIPLIER)
		..addTooltipProperty("Stun Duration", (int lvl) -> STUN_DURATION.toString() + " sec.")
		..presetAreaofEffect(lvl -> AOE)
		..presetCastRange(lvl -> CAST_RANGE)
		..tooltipStopListen()
		..presetFollowThroughTime((int lvl) -> 1.)
		..presetOption(Option.VISIBLE, true)
		..presetOption(Option.TARGETIMAGE, true)
		..presetTargetType((int lvl) -> Targettype.POINT castTo int)
		..presetDisableOtherAbilities((int lvl) -> false)
		..presetArtDuration((int lvl) -> 1) 
		..presetCastingTime((int lvl) -> 0)
		gnomeShopDef.addAbilitySold(ABIL_ID, false, ICON, NAME, tooltipGen.getTooltipLearnExtended(), SHOP_COST)

	// Specifically for Resonating Maul
	use LinkedListModule
	private unit caster
	private vec2 pos

	function getCaster() returns unit
		return caster

	function getPos() returns vec2
		return pos

	private static function isValidTarget(unit caster, unit u) returns bool
		return u.isEnemyOf(caster) and u.isAlive() and not u.isType(UNIT_TYPE_MAGIC_IMMUNE) and not u.isInvulnerable()

	private static function damageTarget(unit caster, unit target, real damage)
		caster.damageTarget(target, damage, false, false, ATTACK_TYPE, DAMAGE_TYPE, WEAPON_TYPE)			

	private static let markedUnits = new HashMap<unit, CallbackSingle>

	construct(unit caster, vec3 target, int level)
		let a = caster.getPos3Real()
		let b = target
		let mid = a.lerp(b, 0.5)
		let dist2d = a.distanceTo2d(b)
		let control = vec3(mid.x, mid.y, 2 * (mid.z + PROJECTILE_ARC_FACTOR * dist2d) - 0.5 * (a.z + b.z))
		let proj = addEffect(PROJECTILE_MODEL, a)
		..setScale(PROJECTILE_SCALE)
		..playAnimation(ANIM_TYPE_BIRTH, PROJECTILE_BIRTH_TIME_SCALE)
		..setYaw(a.angleTo2d(b))
		let callAmount = (dist2d / PROJECTILE_SPEED / ANIMATION_PERIOD).toInt()
		
		this.caster = caster
		pos = a.toVec2()
		
		doPeriodicallyCounted(ANIMATION_PERIOD, callAmount) (projCb) ->
			pos = proj.getPos()
			if not projCb.isLast()
				proj.setPos(a.bezier3(control, b, projCb.progress()))
			else
				proj..setPos(b)
				..playAnimation(ANIM_TYPE_STAND, PROJECTILE_STAND_TIME_SCALE)
				flashEffect(LANDING_EFFECT, b)
				forUnitsInRange(b.toVec2(), AOE, true) (unit u) ->
					if isValidTarget(caster, u)
						if markedUnits.has(u)
							damageTarget(caster, u, LANDING_DAMAGE[level - 1] * MARK_DAMAGE_MULTIPLIER)
							u.stun(STUN_DURATION)
						else
							damageTarget(caster, u, LANDING_DAMAGE[level - 1])
				let enumUnmarked = CreateGroup()
				let enumGroup = CreateGroup()
				doPeriodicallyTimed(LIGHTNING_INTERVAL, HAMMER_LIFETIME) (lightningCb) ->
					if lightningCb.isLast()
						proj..setTimeScale(PROJECTILE_DEATH_TIME_SCALE)
						..destr()
						enumGroup.destr()
						enumUnmarked.destr()
						destroy this
					else
						enumGroup.clear()
						enumUnmarked.clear()
						forUnitsInRange(b.toVec2(), AOE, true) (unit u) ->
							if isValidTarget(caster, u)
								enumGroup.add(u)
								if not u.hasAbility(MARK_BUFF.buffId)
									enumUnmarked.add(u)
						let random = enumUnmarked.isEmpty() ? enumGroup.getRandom() : enumUnmarked.getRandom()
						if random != null
							if not random.addAbility(MARK_BUFF.abilId)
								destroy markedUnits.get(random)
							flashEffect(LIGHTNING_IMPACT_EFFECT, random, LIGHTNING_IMPACT_ATTACH)
							damageTarget(caster, random, LIGHTNING_DAMAGE[level - 1])
							let light = new LigthingEx(LIGHTNING_CODE, b, random, LIGHTNING_IMPACT_OFFSET)
							let clr = light.getColor()
							light..setColor(colorA(clr.red, clr.green, clr.blue, (clr.alpha / 2).toInt()))
							..setLifetime(LIGHTNING_INTERVAL)
							..setFadepoint(LIGHTNING_INTERVAL/2)
							let markCb = doAfter(MARK_DURATION) -> 
								markedUnits.remove(random)
								random..removeAbility(MARK_BUFF.abilId)
								..removeAbility(MARK_BUFF.buffId)
							markedUnits.put(random, markCb)
							

init
	preloadAbility(StormHammer.MARK_BUFF.abilId)
	Preload(StormHammer.PROJECTILE_MODEL)
	Preload(StormHammer.LANDING_EFFECT)
	EventListener.onPointCast(StormHammer.ABIL_ID) (unit caster, vec2 target) ->
		new StormHammer(caster, target.withTerrainZ(), caster.getAbilityLevel(EventData.getSpellAbilityId()))

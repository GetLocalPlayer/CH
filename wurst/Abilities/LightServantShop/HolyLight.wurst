package HolyLight
import Assets
import ChannelAbilityPreset
import AbilityTooltipGenerator
import LightServantShop
import HotkeyFactory

import ClosureEvents
import ClosureTimers
import ClosureForGroups


public class HolyLight
	static constant int SHOP_COST = 1
	static constant int LEVELS = 5
	static constant HOTKEY = getHotkey()
	static constant ICON = Icons.bTNHolyBolt
	static constant NAME = "Holy Light"
	static constant DESCRIPTION = "Divine energy that blesses all the units in a target area. After a short delay, the allies restore health and the enemies take damage."
	static constant real CAST_RANGE = 500.
	static constant real AOE = 150.
	static constant real COOLDOWN = 8.
	static constant int array MANACOST = [100, 115, 130, 145, 160]
	static constant real array HEALING = [300, 350, 400, 450, 500]
	static constant ATTACK_TYPE = ATTACK_TYPE_NORMAL
	static constant DAMAGE_TYPE = DAMAGE_TYPE_MAGIC
	static constant WEAPON_TYPE = WEAPON_TYPE_WHOKNOWS
	static constant real DAMAGE_FACTOR = 0.5
	static constant real DELAY = 2
	static constant FX_AREA = Abilities.darkPortalTarget
	static constant FX_TARGET = Abilities.holyBoltSpecialArt
	static constant FX_ATTACH = "overhead"

	static constant ID = compiletime(ABIL_ID_GEN.next())

	@compiletime
	private static function build()
		let tooltipGen = new AbilityTooltipGenerator(NAME, DESCRIPTION)
		new ChannelAbilityPreset(ID, LEVELS, true)
		..setIconNormal(ICON)
		..setName(NAME)
		..presetHotkey(HOTKEY)
		..setHeroAbility(true)
		..setRequirements("")
		..setRace(Race.Human)
		..setArtTarget("")
		..setArtEffect(FX_AREA)
		..registerTooltipGenerator(tooltipGen)
		..tooltipStartListen()
		..setLevels(LEVELS)
		..presetAreaofEffect(lvl -> AOE)
		..presetCastRange(lvl -> CAST_RANGE)
		..presetManaCost((int lvl) -> MANACOST[lvl - 1])
		..presetCooldown((int lvl) -> COOLDOWN)
		..addTooltipProperty("Healing", (int lvl) -> HEALING[lvl - 1])
		..addTooltipProperty("Damage", (int lvl) -> (DAMAGE_FACTOR * 100).toInt().toString() + "% of healing")
		..tooltipStopListen()
		..presetTargetsAllowed(lvl -> TargetsAllowed.enemies)
		..presetOption(Option.VISIBLE, true)
		..presetOption(Option.TARGETIMAGE, true)
		..presetTargetType((int lvl) -> Targettype.POINT castTo int)
		..presetDisableOtherAbilities((int lvl) -> false)
		..presetFollowThroughTime((int lvl) -> 1.)
		..presetArtDuration((int lvl) -> 5) 
		..presetCastingTime((int lvl) -> 0)
		lightServantShopDef.addAbilitySold(ID, false, ICON, NAME, tooltipGen.getTooltipLearnExtended(), SHOP_COST)

	protected static function onInit()
		EventListener.onPointCast(ID) (caster, target) ->
			let affectedUnits = CreateGroup()
			forUnitsInRange(target, AOE, true) (unit u) ->
				if u.isAlive() and not u.isType(UNIT_TYPE_MAGIC_IMMUNE) and not u.isInvulnerable()
					affectedUnits.add(u)
			if affectedUnits.isEmpty()
				affectedUnits.destr()
			else
				let healing = HEALING[caster.getAbilityLevel(ID) -1]
				doAfter(DELAY) () ->
					let damage = healing * DAMAGE_FACTOR
					for u in affectedUnits
						if u.isAlive() and not u.isType(UNIT_TYPE_MAGIC_IMMUNE)
							flashEffect(FX_TARGET, u, FX_ATTACH)
							if u.isAllyOf(caster)
								u.addHP(healing)
							else
								caster.damageTarget(u, damage, false, false, ATTACK_TYPE, DAMAGE_TYPE, WEAPON_TYPE)
					affectedUnits.destr()


init
	HolyLight.onInit()
package DivineSpanks
import LinkedList
import HashMap
import ClosureEvents
import ClosureTimers
import AttackPrevention
import Preloader

import Assets
import BuffObjEditing
import ChannelAbilityPreset
import AbilityTooltipGenerator
import HotkeyFactory
import LightServantShop


class DivineSpanks
	static constant int SHOP_COST = 1
	static constant int LEVELS = 5
	static constant HOTKEY = getHotkey()
	static constant ICON = "ReplaceableTextures\\CommandButtons\\BTNDivineSpanks.blp"
	static constant NAME = "Divine Spanks"
	static constant DESCRIPTION = "|cff7bfdb6Passive|r|nThe hero now can attack allied heroes but instead of damaging his attacks heal the target.|n|n|cff7bfdb6Active|r:|nMarks an ally hero. Marked heroes share healing from Divine Spanks."
	static constant BUFF_NAME = "|cff00ff00Second Hand|r"
	static constant BUFF_DESCRIPTION = "This unit receives healing."

	static constant real array HEALING_FACTOR = [0.5, 0.55, 0.65, 0.70, 0.75]
	static constant real CAST_RANGE = 550
	static constant real DURATION = 20
	static constant real array COOLDOWN = [15, 14, 12, 10, 8]
	static constant int MANACOST = 110
	static constant TARGETS_ALLOWED = "air,ground,friend,self,vuln,invu,hero,neutral"

	static constant FX_MISSILE = Abilities.holyBoltMissile
	static constant FX_BUFF_TARGET = Abilities.spiritLinkTarget
	static constant FX_ABIL_TARGET = Abilities.spiritLinkZapTarget
	static constant FX_TARGET = Abilities.healBottleMissile
	static constant FX_ATTACH_TARGET = "chest"
	static constant FX_SECONDARY_TARGET = Abilities.vampiricAuraTarget
	static constant FX_ATTACH_SECONDARY_TARGET = "origin"

	static constant ID = compiletime(ABIL_ID_GEN.next())
	static constant BUFF_TUPLE = compiletime(createDummyBuffObject(BUFF_NAME, BUFF_DESCRIPTION, ICON, FX_BUFF_TARGET, "chest"))
	// This orb abil is needed only to change the owner's attack missile
	static constant ORB_ABIL_ID = compiletime(ABIL_ID_GEN.next())

	@compiletime private static function build()
		let tooltipGen = new AbilityTooltipGenerator(NAME, DESCRIPTION)
		new ChannelAbilityPreset(ID, LEVELS, true)
		..setIconNormal(ICON)
		..setName(NAME)
		..presetHotkey(HOTKEY)
		..setHeroAbility(true)
		..setRequirements("")
		..setRace(Race.Human)
		..setArtTarget(FX_ABIL_TARGET)
		..registerTooltipGenerator(tooltipGen)
		..tooltipStartListen()
		..setLevels(LEVELS)
		..presetCastRange(lvl -> CAST_RANGE)
		..presetManaCost(lvl -> MANACOST)
		..presetCooldown(lvl -> COOLDOWN[lvl - 1])
		..addTooltipProperty("Attack Damage as Healing", (int lvl) -> (HEALING_FACTOR[lvl - 1] * 100).toInt().toString() + "%")
		..tooltipStopListen()
		..presetTargetsAllowed(lvl -> TARGETS_ALLOWED)
		..presetOption(Option.VISIBLE, true)
		..presetOption(Option.TARGETIMAGE, false)
		..presetTargetType((int lvl) -> Targettype.UNIT castTo int)
		..presetDisableOtherAbilities((int lvl) -> false)
		..presetFollowThroughTime((int lvl) -> 1.)
		..presetArtDuration((int lvl) -> 1) 
		..presetCastingTime((int lvl) -> 0)
		lightServantShopDef.addAbilitySold(ID, false, ICON, NAME, tooltipGen.getTooltipLearnExtended(), SHOP_COST)
		new AbilityDefinitionFrostDamageBonus(ORB_ABIL_ID)
		..setMissileArt(FX_MISSILE)
		..setArtTarget("")
		..setArtSpecial("")
		..setRace(Race.Human)
		..setName(NAME)
		..setDamageBonus(1, 0)
		..setEnabledAttackIndex(1, 1)
		..setTargetsAllowed(1, "none")

	protected static function _init()
		Preload(FX_TARGET)
		preloadAbility(BUFF_TUPLE.abilId)
		preloadAbility(ORB_ABIL_ID)

		AbilityShop.onSold() (unit u, int abilId, int level) ->
			if abilId == ID and level == 1
				u..addAbility(ORB_ABIL_ID)
				..makeAbilityPermanent(ORB_ABIL_ID, true)

		// <affected unit, caster>
		let affectedUnits = new HashMap<unit, unit>
		// <affected unit, timer callback>
		let buffCallbacks = new HashMap<unit, CallbackSingle>
		// <caster, <list of affected units>
		let castersTargets = new HashMap<unit, LinkedList<unit>>

		EventListener.onTargetCast(ID) (unit caster, unit target) ->
			if not affectedUnits.has(target)
				target..addAbility(BUFF_TUPLE.abilId)
				..makeAbilityPermanent(BUFF_TUPLE.abilId, true)
			else
				destroy buffCallbacks.getAndRemove(target)
				let oldCaster = affectedUnits.get(target)
				if oldCaster != caster
					let list = castersTargets.get(oldCaster)
					list.remove(target)
					if list.isEmpty()
						destroy list
						castersTargets.remove(oldCaster)
			affectedUnits.put(target, caster)
			if not castersTargets.has(caster)
				castersTargets.put(caster, new LinkedList<unit>)
			castersTargets.get(caster).add(target)
			let buffCb = doAfter(DURATION) () ->
				affectedUnits.remove(target)
				buffCallbacks.remove(target)
				castersTargets.get(caster).remove(target)
				if castersTargets.get(caster).isEmpty()
					destroy castersTargets.getAndRemove(caster)
				target..removeAbility(BUFF_TUPLE.abilId)
				..removeAbility(BUFF_TUPLE.buffId)
			buffCallbacks.put(target, buffCb)

		onAttackPreventionCheck() (unit attacker, unit target) ->
			return not attacker.hasAbility(ID)

		EventListener.add(EVENT_PLAYER_UNIT_ATTACKED) ->
			let target = EventData.getTriggerUnit()
			let attacker = EventData.getAttackerUnit()
			if target.isAllyOf(attacker)
				if attacker.hasAbility(ID)
					attacker.addAbility(ORB_ABIL_ID)
			else
				attacker.removeAbility(ORB_ABIL_ID)

		EventListener.add(EVENT_PLAYER_UNIT_DAMAGING) ->
			let target = EventData.getTriggerUnit()
			let attacker = EventData.getEventDamageSource()
			if  BlzGetEventIsAttack() and attacker.hasAbility(ID) and attacker.isAllyOf(target) 
				flashEffect(FX_TARGET, target, FX_ATTACH_TARGET)
				let lvl = attacker.getAbilityLevel(ID)
				var healing = HEALING_FACTOR[lvl - 1] * EventData.getEventDamage()
				EventData.setDamage(0)
				if castersTargets.has(attacker)
					let list = castersTargets.get(attacker)
					healing /= list.size() + 1
					for u in list
						u.setLife(u.getLife() + healing)
						flashEffect(FX_SECONDARY_TARGET, u, FX_ATTACH_SECONDARY_TARGET)
				target.setLife(target.getLife() + healing)


init
	DivineSpanks._init()
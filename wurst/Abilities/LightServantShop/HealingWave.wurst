package HealingWave
import Assets
import ChannelAbilityPreset
import AbilityTooltipGenerator
import LightServantShop
import HotkeyFactory

import ClosureEvents
import ClosureTimers
import ClosureForGroups
import LinkedList
import LigthingEx


public class HealingWave
	static constant int SHOP_COST = 1
	static constant int LEVELS = 5
	static constant HOTKEY = getHotkey()
	static constant ICON = Icons.bTNHealingWave
	static constant NAME = "Healing Wave"
	static constant DESCRIPTION = "Calls forth a wave of energy that heals a target and bounces to nearby friendlies. Each bounce heals less damage. |cff969696The most wounded are healed first.|r"
	static constant LIGHTNING_TYPE = LIGHTNING_HEALING_WAWE_PRIMARY
	static constant real LIGHTNING_LIFETIME = 0.75
	static constant real LIGHTNING_JUMP_INTERVAL = 0.25
	static constant LIGHTING_LAUNCH_IMPACT_OFFSET = vec3(0, 0, 100)
	static constant SOUND_EFFECT = "HealingWaveTarget"

	static constant real array HEALING = [60, 100, 140, 180, 220]
	static constant int NUMBER_OF_TARGETS = 6
	static constant real HEALING_TARGET_FACTOR = 0.9
	static constant real CAST_RANGE = 700.
	static constant real AOE = 500.
	static constant real COOLDOWN = 2.5
	static constant int array MANACOST = [50, 55, 60, 65, 70]
	static constant TARGETS_ALLOWED = "air,ground,friend,ally,self,vuln,invu,organic,neutral"

	static constant ID = compiletime(ABIL_ID_GEN.next())

	@compiletime
	private static function build()
		let tooltipGen = new AbilityTooltipGenerator(NAME, DESCRIPTION)
		new ChannelAbilityPreset(ID, LEVELS, true)
		..setIconNormal(ICON)
		..setName(NAME)
		..presetHotkey(HOTKEY)
		..setEffectSound(SOUND_EFFECT)
		..setHeroAbility(true)
		..setRequirements("")
		..setRace(Race.Human)
		..setArtTarget("")
		..registerTooltipGenerator(tooltipGen)
		..tooltipStartListen()
		..setLevels(LEVELS)
		..presetManaCost((int lvl) -> MANACOST[lvl - 1])
		..presetCooldown((int lvl) -> COOLDOWN)
		..addTooltipProperty("Healing", (int lvl) -> HEALING[lvl - 1])
		..addTooltipProperty("Number of Targets", (int lvl) -> NUMBER_OF_TARGETS)
		..presetAreaofEffect(lvl -> AOE)
		..presetCastRange(lvl -> CAST_RANGE)
		..tooltipStopListen()
		..presetFollowThroughTime((int lvl) -> 1.)
		..presetTargetsAllowed(lvl -> TARGETS_ALLOWED)
		..presetOption(Option.VISIBLE, true)
		..presetTargetType((int lvl) -> Targettype.UNIT castTo int)
		..presetDisableOtherAbilities((int lvl) -> false)
		..presetArtDuration((int lvl) -> 1) 
		..presetCastingTime((int lvl) -> 0)
		lightServantShopDef.addAbilitySold(ID, false, ICON, NAME, tooltipGen.getTooltipLearnExtended(), SHOP_COST)

	protected static function onInit()
		EventListener.onCast(ID) (unit caster) ->
			let target = EventData.getSpellTargetUnit()
			new LigthingEx(LIGHTNING_TYPE, caster, target, LIGHTING_LAUNCH_IMPACT_OFFSET, LIGHTING_LAUNCH_IMPACT_OFFSET)
			..setLifetime(LIGHTNING_LIFETIME)
			..setFadepoint(LIGHTNING_LIFETIME)
			var healing = HEALING[caster.getAbilityLevel(ID) - 1]
			target.addHP(healing)
			let affected = new LinkedList<unit>()
			..add(target)
			doPeriodicallyCounted(LIGHTNING_JUMP_INTERVAL, NUMBER_OF_TARGETS - 1) cbTargets ->
				let prevTarget = affected.peek()
				affected.add(null)
				forUnitsInRange(prevTarget.getPos(), AOE, true) (unit u) ->
					if u.isAlive() and u.isAllyOf(caster) and not u.isType(UNIT_TYPE_MAGIC_IMMUNE) and not u.isType(UNIT_TYPE_STRUCTURE) and not affected.has(u)
						let last = affected.peek()
						if last == null or u.getHP() / u.getMaxHP() < last.getHP() / last.getMaxHP()
							affected.set(affected.size() - 1, u)
				let newTarget = affected.peek()
				if newTarget != null
					healing *= HEALING_TARGET_FACTOR
					newTarget.addHP(healing)
					new LigthingEx(LIGHTNING_TYPE, affected.get(affected.size() - 2), newTarget, LIGHTING_LAUNCH_IMPACT_OFFSET, LIGHTING_LAUNCH_IMPACT_OFFSET)
					..setLifetime(LIGHTNING_LIFETIME)
					..setFadepoint(LIGHTNING_LIFETIME)
					if cbTargets.isLast()
						destroy affected
				else
					destroy affected
					destroy cbTargets


init
	HealingWave.onInit()